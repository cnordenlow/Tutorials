[
["index.html", "Templates Intro", " Templates christoffer.nordenlow@riksbank.se 2020-05-26 Intro This repository includes useful templates, formulas and code for R, VBA, SQL, also in combination with Bloomberg formulas and Fixed Income analytics. "],
["r.html", "1 R 1.1 Create template tables 1.2 Import &amp; Export 1.3 Tidy &amp; Transform 1.4 Working with strings and characters 1.5 Visualize 1.6 Misc 1.7 R Markdown 1.8 Web Scraping 1.9 Useful functions / expressions", " 1 R 1.1 Create template tables 1.1.1 Template tables Create table with random dates between two dates. Use max date and create a table with dates until this date. #https://www.cyclismo.org/tutorial/R/basicOps.html#basic-operations library(dplyr) df &lt;- tibble( date = sample(seq(as.Date(&#39;2020/06/01&#39;), as.Date(&#39;2025/01/01&#39;), by=&quot;day&quot;), 20) ) df2 &lt;-tibble( date = seq.Date(Sys.Date(), max(as.Date(df$date)), by = &quot;day&quot;) ) Create new column with random number library(tidyverse) df &lt;- data.frame(Amount = 1:10) df %&gt;% rowwise %&gt;% mutate(newColumn = sample(1:5, 1)) #It´s often neccessary to ungroup rowwise. df &lt;- as.data.frame(df) Create table with a combination of fixed and random numbers library(tidyverse) df &lt;- tibble( value = seq(10,90,1), rand = seq(10,90,1) +runif(81, min=-10, max=15) ) **Create a list and bind together, only 1 column* libary(dplyr) lst &lt;- list(cars, cars) lst &lt;- bind_rows(lst) lst %&gt;% select(2) #Bind together list, include the index number / name. Use data.table library(data.table) lst &lt;- list(cars, cars) lst &lt;- rbindlist(lst, idcol = TRUE) 1.1.2 Creating list-columns library(tidyverse) library(purrr) library(gapminder) #List columns #data.frame treats a list as a list of columns data.frame(x = list(1:3, 3:5)) #Use of I can prevent this but dosen´t look good. data.frame( x = I(list(1:3, 3:5)), y = c(&quot;1,2&quot;,&quot;3,4,5&quot;) ) #Tibble can handle it tibble( x = list(1:3, 3:5), y = c(&quot;1,2&quot;, &quot;3,4,5&quot;) ) #Even easier with tribble tribble( ~x, ~y, 1:3, &quot;1,2&quot;, 3:5, &quot;3,4,5&quot; ) #nest() creates a nested data frame with a list-column of data frames. gapminder %&gt;% group_by(country, continent)%&gt;% nest() #from vectorized functions df &lt;- tribble( ~x1, &quot;a,b,c&quot;, &quot;d,e,f,g&quot; ) df %&gt;% mutate(x2 = stringr::str_split(x1, &quot;,&quot;))%&gt;% unnest() #using Purrr sim &lt;- tribble( ~f, ~params, &quot;runif&quot;, list(min = -1, max=-1), &quot;rnorm&quot;, list(sd = 5), &quot;rpois&quot;, list(lambda=10) ) sim %&gt;% mutate(sims = invoke_map(f, params, n = 10)) #from multivalued summaries, you need to wrap it in a list for being able to summarise. mtcars %&gt;% group_by(cyl)%&gt;% summarize(q=list(quantile(mpg))) probs &lt;- c(0.01, 0.25,0.5,0.75,0.99) mtcars %&gt;% group_by(cyl)%&gt;% summarize(p = list(probs), q=list(quantile(mpg))) #from a named list x &lt;- list( a = 1:5, b = 3:4, c = 5:6 ) df &lt;- enframe(x) df df %&gt;% mutate(smry = map2_chr( name, value, ~ stringr::str_c(.x, &quot;: &quot;, .y[1]) )) 1.2 Import &amp; Export 1.2.1 Import Import fast using httpcashe Improving efficiency in importing get_data &lt;- function(url) { httpcache::GET(url) %&gt;% httr::content() } url_jobless_claims=&quot;https://oui.doleta.gov/unemploy/csv/ar539.csv&quot; data_jobless_claims &lt;- get_data(url_jobless_claims) Import all files in a folder Import all files in a folder. In the example below files are named “2020-05-05 Saldo”. Import and create a table where the date of the filename is used in a column. Change name for column 1 and 2. Map has similiar functionality to lapply. When you add _dfr it will generate data.frames and that these is merged. parse_date &lt;- function(x) as.Date(gsub( &quot;.*(\\\\d{4}-\\\\d{2}-\\\\d{2}).*&quot;, &quot;\\\\1&quot;, x)) dir_loc &lt;- &#39;...RX-filer\\\\Saldo&#39; rix_saldo &lt;- dir(dir_loc, full.names = T) %&gt;% map_dfr(~{ read.csv2(.x, skip = 1, header = F) %&gt;% mutate(date = as.Date(parse_date(basename(.x)))) }) colnames(rix_saldo)[colnames(rix_saldo) == &#39;V1&#39;] &lt;- &#39;Participant&#39; colnames(rix_saldo)[colnames(rix_saldo) == &#39;V2&#39;] &lt;- &#39;Saldo&#39; Import all files in a folder with conditions of name Use pattern to set the conditions which files that should be imported. For example, those who ends with “Saldo.csv” as below. Regexp (see http://jkorpela.fi/perl/regexp.html) is used in pattern. For example, you need to use \\. for the dot. Also, ^ can be used to determine the beginning of a string while $ is used to set the end. pattern = \"^.Saldo\\.csv$\"* parse_date &lt;- function(x) as.Date(gsub( &quot;.*(\\\\d{4}-\\\\d{2}-\\\\d{2}).*&quot;, &quot;\\\\1&quot;, x)) dir_loc &lt;- &#39;...RX-filer\\\\Saldo&#39; rix_saldo &lt;- dir(dir_loc, full.names = T, pattern = &quot;^.*Saldo\\\\.csv$&quot;) %&gt;% map_dfr(~{ read.csv2(.x, skip = 1, header = F) %&gt;% mutate(date = as.Date(parse_date(basename(.x)))) }) colnames(rix_saldo)[colnames(rix_saldo) == &#39;V1&#39;] &lt;- &#39;Participant&#39; colnames(rix_saldo)[colnames(rix_saldo) == &#39;V2&#39;] &lt;- &#39;Saldo&#39; Import all excel files in a folder with condition of name #Import a .xlsm files, one particular sheet. dir_loc &lt;- &#39;...\\\\Operations\\\\History_bokningssnurra&#39; dir &lt;-dir(dir_loc, full.names = T, pattern =&quot;.xlsm&quot;) rawData &lt;- map_dfr(dir, read_xlsx, sheet = &quot;indata_AUPD&quot;, col_names = TRUE, col_types = &#39;text&#39;) Import excel from web Import excel from web by downloading it temp library(readxl) url_data_gdp &lt;- (&quot;https://www.bea.gov/system/files/2020-04/qgdpstate0420.xlsx&quot;) download.file(url=url_data_gdp, destfile=&quot;localcopy.xlsx&quot;, mode=&quot;wb&quot;) #Table 1: Percent Change in Real Gross Domestic Product (GDP) by State and state table1 &lt;- read_excel(&#39;localcopy.xlsx&#39;, sheet = 1, skip =4, col_names = FALSE) 1.2.2 Export Export to txt file write.table(table_for_report, &quot;...\\\\Operations\\\\LikvProg\\\\likvprog_history.txt&quot;, sep=&quot;\\t&quot;) Export to csv file #Using both write.csv2 or write.table library(data.table) #Write csv2. No row.names, na = &quot;&quot; and quote (&quot;&quot;) mark as false write.csv2(total_purchases_commercial_papers, &quot;.....R_tables\\\\Output_data\\\\webpage_purchases\\\\Total_purchases_commercial_papers.csv&quot;,row.names=FALSE,na = &quot;&quot;, quote = FALSE) #Write.table. No row.names, na = &quot;&quot; and quote (&quot;&quot;) mark as false write.table(total_purchases_commercial_papers,file=&quot;...\\\\Total_purchases_commercial_papers3.csv&quot;,row.names=FALSE,sep=&quot;;&quot;,dec = &quot; &quot;,quote = FALSE) Get table to paste into excel write.excel &lt;- function(x,row.names=FALSE,col.names=TRUE,...) { write.table(df,&quot;clipboard&quot;,sep=&quot;\\t&quot;,row.names=row.names,col.names=col.names,...) } write.excel(my.df) 1.3 Tidy &amp; Transform 1.3.1 Cleaning Cleaning some data Gather, Spread, Separate, Unite library(tidyr) #Create a messy dataset messy &lt;- data.frame( country = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), q1_2017 = c(0.03, 0.05, 0.01), q2_2017 = c(0.05, 0.07, 0.02), q3_2017 = c(0.04, 0.05, 0.01), q4_2017 = c(0.03, 0.02, 0.04)) messy #Reshape the data. in this function we create two new variables instead of the one in the original dataset. tidier &lt;- messy%&gt;% gather(quarter, growth, q1_2017:q4_2017) tidier #Spread #the spread function does the opposite of gather. #Reshape the tidier dataset back to messy. messy_1 &lt;- tidier %&gt;% spread(quarter, growth) messy_1 #Separate #Separate splits a column into two according to a separator. This function is helpful in some situations where the variable is a date, i.e. separate year and month. separate_tidier &lt;- tidier %&gt;% separate(quarter, c(&quot;Qrt&quot;, &quot;year&quot;), sep =&quot;_&quot;) head(separate_tidier) #Unite #Unite concatenates two columns into one. unit_tidier &lt;- separate_tidier%&gt;% unite(Quarter, Qrt, year, sep = &quot;_&quot;) head(unit_tidier) 1.3.2 Expand Expand table One example with expanding to all alternatives. Another to fill in gaps. library(tidyverse) library(dplyr) ##Expand all alternatives a &lt;- c(1:10) b &lt;- c(1:10) c &lt;- c(1:10) df &lt;- tibble(a,b,c) all_combinations &lt;- expand(df, a,b,c) #Expand by missing Date df &lt;- tibble( year = c(2010, 2010, 2010, 2010, 2012, 2012, 2012), qtr = c( 1, 2, 3, 4, 1, 2, 3), return = rnorm(7) ) df %&gt;% expand(year, qtr) df %&gt;% expand(year = 2010:2012, qtr) df %&gt;% complete(year = full_seq(year, 1), qtr) 1.3.3 Join and Merge Join tables Different ways to join tables. library(dplyr) df_primary &lt;- tribble( ~ID,~y, &quot;A&quot;, 5, &quot;B&quot;, 5, &quot;C&quot;, 8, &quot;D&quot;, 0, &quot;E&quot;, 9) df_secondary &lt;- tribble( ~ID,~y, &quot;A&quot;, 30, &quot;B&quot;, 21, &quot;C&quot;, 22, &quot;D&quot;, 25, &quot;F&quot;, 29) #Most common way to merge two datasets is to uset the left_join() function. left_join_ &lt;- left_join(df_primary, df_secondary, by =&#39;ID&#39;) #The right_join works like the left one. right_join_ &lt;- right_join(df_primary, df_secondary, by = &#39;ID&#39;) #When we are sure that two datasets won´t match, we can consider to return only rows existing in both datasets. #This is legit when we need a clean dataset or when we dont want to impute missing values with the mean or median. inner_join_ &lt;- inner_join(df_primary, df_secondary, by =&#39;ID&#39;) # Full_join keeps all observations and replace missing values with NA. full_join_ &lt;- full_join(df_primary, df_secondary, by = &#39;ID&#39;) Join tables on multiple conditions Join Tables on multiple conditions library(dplyr) df_primary &lt;- tribble( ~ID, ~year, ~items, &quot;A&quot;, 2015,3, &quot;A&quot;, 2016,7, &quot;A&quot;, 2017,6, &quot;B&quot;, 2015,4, &quot;B&quot;, 2016,8, &quot;B&quot;, 2017,7, &quot;C&quot;, 2015,4, &quot;C&quot;, 2016,6, &quot;C&quot;, 2017,6) df_secondary &lt;- tribble( ~ID, ~year, ~prices, &quot;A&quot;, 2015,9, &quot;A&quot;, 2016,8, &quot;A&quot;, 2017,12, &quot;B&quot;, 2015,13, &quot;B&quot;, 2016,14, &quot;B&quot;, 2017,6, &quot;C&quot;, 2015,15, &quot;C&quot;, 2016,15, &quot;C&quot;, 2017,13) left_join(df_primary, df_secondary, by = c(&#39;ID&#39;, &#39;year&#39;)) Merge Data Frames Merge Data Frames in R: Full and partial match producers &lt;- data.frame( surname = c(&quot;Spielberg&quot;,&quot;Scorsese&quot;,&quot;Hitchcock&quot;,&quot;Tarantino&quot;,&quot;Polanski&quot;), nationality = c(&quot;US&quot;,&quot;US&quot;,&quot;UK&quot;,&quot;US&quot;,&quot;Poland&quot;), stringsAsFactors=FALSE) # Create destination dataframe movies &lt;- data.frame( surname = c(&quot;Spielberg&quot;, &quot;Scorsese&quot;, &quot;Hitchcock&quot;, &quot;Hitchcock&quot;, &quot;Spielberg&quot;, &quot;Tarantino&quot;, &quot;Polanski&quot;), title = c(&quot;Super 8&quot;, &quot;Taxi Driver&quot;, &quot;Psycho&quot;, &quot;North by Northwest&quot;, &quot;Catch Me If You Can&quot;, &quot;Reservoir Dogs&quot;,&quot;Chinatown&quot;), stringsAsFactors=FALSE) m1 &lt;- merge(producers, movies, by.x = &quot;surname&quot;) m1 # Change name of ` movies ` dataframe colnames(movies)[colnames(movies) == &#39;surname&#39;] &lt;- &#39;name&#39; # Merge with different key value m2 &lt;- merge(producers, movies, by.x = &quot;surname&quot;, by.y = &quot;name&quot;) ##Partial match # Create a new producer add_producer &lt;- c(&#39;Lucas&#39;, &#39;US&#39;) # Append it to the ` producer` dataframe producers &lt;- rbind(producers, add_producer) # Use a partial merge m3 &lt;-merge(producers, movies, by.x = &quot;surname&quot;, by.y = &quot;name&quot;, all.x = TRUE) m3 1.3.4 Transforming data with Apply etc apply(), lapply(), sapply(), tapply() apply() library(dplyr) m1 &lt;- matrix(c&lt;-(1:10), nrow=5,ncol=6) m1 #Sums columns a_m1 &lt;- apply(m1,2,sum) a_m1 #Sums rows a_m1 &lt;- apply(m1,1,sum) a_m1 lapply() library(dplyr) movies &lt;- c(&quot;spyderman&quot;, &quot;batman&quot;, &quot;vertigo&quot;, &quot;chinatown&quot;) movies_lower &lt;- lapply(movies, tolower) str(movies_lower) #if we like to convert the list into a vector we can use unlist() movies_lower &lt;- unlist(lapply(movies, tolower)) str(movies_lower) sapply() #sapply() function does the same jobs as lapply() function but returns a vectorÄ library(dplyr) dt &lt;- cars lmn_cars &lt;- lapply(dt, min) smn_cars &lt;- sapply(dt,min) lmn_cars smn_cars lmxcars &lt;- lapply(dt,max) smxcars &lt;- sapply(dt,max) lmxcars smxcars #lets create a function names avg to compute the average of the minimun and maximun of the vector. avg &lt;- function(x){ (min(x) + max(x))/2 } fcars &lt;- sapply(dt, avg) fcars #sapply() function is more efficient than lapply() in the output returned because sapply() store values directly into a vector. #it is possible to use lapply or sapply interchangeable to slice a data frame. #lets compute a function that takes a vector of numerical values and returns a vector that only contains the values that are strictly above the average. below_ave &lt;- function(x){ ave &lt;- mean(x) return(x[x&gt;ave]) } dt_s &lt;- sapply(dt, below_ave) dt_l &lt;- lapply(dt, below_ave) identical(dt_s, dt_l) tapply() #The function tapply() computes a measure (mean, median, min, max) or a function for each factor variable in a vector library(dplyr) data(iris) tapply(iris$Sepal.Width, iris$Species, median) 1.3.5 Tally-function Tally() Tally is a useful wrapper for summarise with grouping conditions. In the example below we have a data set with countries. For US, there are no aggregate number, so we need to summarize each state. library(tidyr) library(dplyr) df &lt;- tibble::tribble( ~country, ~state, ~t1, ~t2, &quot;SE&quot;, NA, 1,2, &quot;US&quot;, &quot;A&quot;, 10,20, &quot;US&quot;, &quot;B&quot;, 11,21, ) df%&gt;% tidyr::gather(date, value, -country, -state)%&gt;% group_by(country, date) %&gt;% tally(value) ## Iteration with purrr Purrr: map functions map() makes a list map_lgl() makes a logical vector map_int() makes an integer vector map_dbl() makes a double vector map_chr() makes a character vector #calculate mean library(tidyverse) df &lt;- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10) ) map_dbl(df, mean) z &lt;- list(x = 1:3, y = 4:5) map_int(z, length) #using splits. splits mtcars in three pieces and fits the same linear model to each piece. models &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(~lm(mpg ~ wt, data =.)) #. refers to the current list element, as i referred to the current index in the for loop. models %&gt;% map(summary) %&gt;% map_dbl(&quot;r.squared&quot;) #use an integer to select elements x &lt;- list(list(1,2,3), list(4,5,6), list(7,8,9)) x %&gt;% map_dbl(2) #Dealing with failure: Safely safe_log &lt;- safely(log) str(safe_log(10)) x &lt;- list(1,10,&quot;a&quot;) y &lt;- x %&gt;% map(safely(log)) str(y) #combine with transpose to get two lists, one with failure and one that works. y &lt;- y %&gt;% transpose() str(y) #work with the values that are ok or not ok. is_ok &lt;- y$error %&gt;%map_lgl(is_null) x[!is_ok] y$result[is_ok] %&gt;% flatten_dbl() #other useful verbs with purrr: possibly() and quietly() # possibly x &lt;- list(1,10,&quot;a&quot;) x %&gt;% map_dbl(possibly(log, NA_real_)) # quietly() x &lt;- list(1, -1) x %&gt;% map(quietly(log)) %&gt;%str() 1.3.6 Mapping over multiple arguments map2 ##Mapping over multiple arguments ## map2: iterates over two vectors parallel. #arguments that vary for each call come before the function, arguments that are the same for every call come after. mu &lt;- list(5,10,-3) sigma &lt;- list(1,5,10) map2(mu, sigma, rnorm, n=5) %&gt;% str() ## pmap(): takes a list of arguments n &lt;- lsit(1,3,5) args1 &lt;- list(n,mu,sigma) args1 %&gt;% pmap(rnorm) %&gt;% str() #good practise is to name the arguments. args2 &lt;- list(mean = mu, sd = sigma, n = n) args2 %&gt;% pmap(rnorm)%&gt;% str() #since the argments are the same length, it makes sense to store them in a data frame. params &lt;- tribble( ~mean, ~sd, ~n, 5, 1, 1, 10, 5, 3, -3, 10,5 ) params%&gt;% pmap(rnorm) #invoking different functions f &lt;- c(&quot;runif&quot;, &quot;rnorm&quot;, &quot;rpois&quot;) param &lt;- list( list(min = -1, max = 1), list(sd =5), list(lambda = 10) ) invoke_map(f, param, n= 5)%&gt;% str() Purrr pattern finders ## Keep elements of input where the predicate is true iris %&gt;% keep(is.factor) %&gt;% str() #discard elements iris %&gt;% discard(is.factor) %&gt;% str() #some determine if the predicate is true for any x &lt;- list(1:5, letters, list(10)) x %&gt;% some(is_character) #every determine if the predicate is true for all x %&gt;% every(is_vector) # detect() finds the first element where the predicate is true x &lt;- sample(10) x x %&gt;% detect(~ . &gt; 5) x %&gt;% detect_index(~ . &gt;5) #head_While #take elements from the start or end of a vector while a predicate is true. pos &lt;- function(x) x &gt;= 0 head_while(5:-5, pos) big &lt;- function(x) x &gt; 5 head_while(0:10, big) tail_while(0:10, big) #reduce and accumulate dfs &lt;- list( age = tibble(name = &quot;john&quot;, age = 30), sex = tibble(name = c(&quot;john&quot;, &quot;mary&quot;), sex = c(&quot;M&quot;, &quot;F&quot;)), trt = tibble(name = &quot;mary&quot;, treatment = &quot;A&quot;) ) dfs %&gt;% reduce(full_join) # find the intersection vs &lt;- list( c(1,3,5,6,10), c(1,2,3,6,7,8), c(1,2,3,4,5,6) ) vs %&gt;% reduce(intersect) #accumulate x &lt;- sample(10) x x %&gt;% accumulate(`+`) 1.4 Working with strings and characters Remove last n characters #Remove last n characters in a string df &lt;- tibble( program = c(rep(&quot;okv 20200528&quot;,10), rep(&quot;ftg 20200525&quot;,10)) ) df$program &lt;- substr(df$program,1,nchar(df$program)-9) 1.5 Visualize 1.5.1 Ggplots geom_line with geom_ribbon geom_line with geom_ribbon for pos / neg numbers library(ggplot2) df &lt;- tibble( value = seq(1,50,1), rand = seq(1,50,1) +runif(50, min=-10, max=15) )%&gt;% mutate(diff = rand - value) exposure_graph &lt;- ggplot(df, aes(x=value,y=rand)) + geom_ribbon(aes(ymin=pmin(df$diff,0), ymax=0), fill=&quot;red&quot;, col=&quot;black&quot;, alpha=0.5) + geom_ribbon(aes(ymin=0, ymax=pmax(df$diff,0)), fill=&quot;blue&quot;, col=&quot;black&quot;, alpha=0.5) + geom_line(aes(y=0)) 1.5.2 Different tables Create table with kableExtra Create table with different colors for pos / neg numbers library(tidyverse) library(kableExtra) df &lt;- tibble( type = c(&quot;gov_bond&quot;, &quot;ssa&quot;, &quot;ssa&quot;, &quot;gov_bond&quot;,&quot;ssa&quot;, &quot;ssa&quot;, &quot;gov_bond&quot;, &quot;gov_bond&quot;, &quot;gov_bond&quot;, &quot;ssa&quot;), maturity_bucket = as.integer(runif(10, min =1, max=6)), diff_bm = runif(10, min = -10, max = 10) ) sum_type &lt;- df %&gt;% group_by(type, maturity_bucket)%&gt;% summarise( diff_exposure = round(sum(diff_bm),1) ) ## Create table with green for positive, red for negative sum_table &lt;- sum_type%&gt;% mutate( diff_exposure = ifelse(diff_exposure &lt; 0, cell_spec(diff_exposure, &quot;html&quot;, color = &quot;red&quot;, bold = T), cell_spec(diff_exposure, &quot;html&quot;, color = &quot;green&quot;, italic = T)))%&gt;% kable(&quot;html&quot;, escape = F, format.args=list(big.mark=&quot; &quot;, scientific=F)) %&gt;% kable_styling(bootstrap_options = c(&quot;striped&quot;, &quot;hover&quot;), full_width = F, position= &quot;right&quot;, fixed_thead = T) sum_table 1.6 Misc 1.6.1 Moving average Create a moving average Example of creating a moving average for dates. library(tidyverse) library(dplyr) library(lubridate) library(slider) library(dplyr, warn.conflicts = FALSE) library(lubridate, warn.conflicts = FALSE) df &lt;- tibble( Date = seq.Date(Sys.Date()-19, Sys.Date(), by=&quot;day&quot;), indicator = c(rep(1,10),rep(2,10)), value = rnorm(20) ) df &lt;- arrange(df, Date) df %&gt;% group_by(indicator) %&gt;% mutate(MA_3m = slide_index_dbl(value, Date, mean, .before=lubridate::days(2), .after=0,.complete=T)) #Use before or after = Inf if you like to get the calculation based on all values before or after. 1.6.2 Number rows within group library(dplyr) mtcars %&gt;% group_by(cyl) %&gt;% mutate(num = 1:n()) 1.6.3 Date Formating Different ways to format dates Dates as.Date(&quot;2/15/1986&quot;, format = &quot;%m/%d/%Y&quot;) Formating date with use of gsub to adjust the the string. library(tidyverse) date_to_format = &quot;2016-10-17 UTC&quot; as.Date(gsub(&quot;\\\\D&quot;, &quot;&quot;, date_to_format), format = &quot;%Y%m%d&quot;) #or changing who table df &lt;- tibble( date_to_format = &quot;2016-10-17 UTC&quot; ) df &lt;- df %&gt;% mutate(date_to_format = as.Date(gsub(&quot;\\\\D&quot;, &quot;&quot;, date_to_format), format = &quot;%Y%m%d&quot;)) 1.6.4 Loops 1.6.4.1 For loop example Creates a non-linear function by using the polynomial of x between 1 and 4 and we store it in a list # # Create an empty list list &lt;- c() # Create a for statement to populate the list for (i in seq(1, 4, by=1)) { list[[i]] &lt;- i*i } print(list) For loop over a matrix A matrix has 2-dimension, rows and columns. To iterate over a matrix, we have to define two for loop, namely one for the rows and another for the column. # Create a matrix mat &lt;- matrix(data = seq(10, 20, by=1), nrow = 6, ncol =2) # Create the loop with r and c to iterate over the matrix for (r in 1:nrow(mat)) for (c in 1:ncol(mat)) print(paste(&quot;Row&quot;, r, &quot;and column&quot;,c, &quot;have values of&quot;, mat[r,c])) 1.6.4.2 For loop example Creates a non-linear function by using the polynomial of x between 1 and 4 and we store it in a list # # Create an empty list list &lt;- c() # Create a for statement to populate the list for (i in seq(1, 4, by=1)) { list[[i]] &lt;- i*i } print(list) 1.6.4.3 For loop and while loop #for loops df &lt;- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10) ) #calculate median output &lt;- vector(&quot;double&quot;, ncol(df)) ###Allocate sufficient space, otherwise it could be slow. for (i in seq_along(df)){ ###Seq_along is better than sing 1:length(), becasue it can handle zero-length vector. output[[i]] &lt;- median(df[[i]]) } output #for loop: modifying an existing object df &lt;- tibble( a = rnorm(10), b = rnorm(10), c = rnorm(10), d = rnorm(10) ) rescale01 &lt;- function(x){ rng &lt;- range(x, na.rm = TRUE) (x - rng[1]) / rng[2] - rng[1] } for (i in seq_along(df)){ df[[i]] &lt;- rescale01(df[[1]]) } ## unknown output length means &lt;- c(0,1,2) output &lt;- double() for (i in seq_along(means)) { #not very efficient n &lt;- sample(100,1) output &lt;- c(output, rnorm(n, means[[i]])) } str(output) #better to save in a list and then combine out &lt;- vector(&quot;list&quot;, length(means)) for (i in seq_along(means)){ n &lt;- sample(100,1) out[[i]] &lt;- rnorm(n, means[[i]]) } str(out) str(unlist(out)) ##unlist a list #unknown sequence length. While loop. WHile loops only has two components, a condition and a body. #how many tries it takes to get three heads in a row. flip &lt;- function() sample(c(&quot;T&quot;, &quot;H&quot;), 1) flips &lt;- 0 nheads &lt;- 0 while (nheads &lt; 3) { if(flip() == &quot;H&quot;){ nheads &lt;- nheads + 1 } else { nheads &lt;- 0 } flips &lt;- flips + 1 } flips Function for Right and Left Functions for Right and Left. library(dplyr) right = function(text, num_char) { substr(text, nchar(text) - (num_char-1), nchar(text)) } left = function(text, num_char) { substr(text, 1, num_char) } df &lt;- tibble( Date = seq.Date(Sys.Date()-19, Sys.Date(), by=&quot;day&quot;), indicator = c(rep(1,10),rep(2,10)), value = rnorm(20) ) left(df$value, 3) right(df$Date, 3) Bloomberg API in R Blmrg API with package Rblpapi library(Rblpapi) con &lt;- blpConnect() #generic us10 &lt;- bdh(securities = &quot;USGG10YR Index&quot;, fields = &quot;PX_LAST&quot;, start.date = as.Date(&quot;2020-03-01&quot;)) #Isin us10 &lt;- bdh(securities = &quot;US912828ZQ64 Govt&quot;, fields = &quot;PX_LAST&quot;, start.date = as.Date(&quot;2020-03-01&quot;)) ##Multiple fields bonds &lt;- c(&quot;CA135087K601 Govt&quot;,&quot;CA563469UP83 Govt&quot;) fields &lt;- c(&quot;PX_LAST&quot;, &quot;YLD_YTM_MID&quot;, &quot;PX_DIRTY_MID&quot;, &quot;Issuer&quot;, &quot;SHORT_NAME&quot;, &quot;YRS_TO_MTY_ISSUE&quot;,&quot;YAS_ASW_SPREAD&quot;, &quot;CPN&quot;, &quot;AMT_OUTSTANDING&quot;, &quot;%_OF_TSY_HLD_IN_THE_FED_RES_SOMA&quot;, &quot;YLD_CHG_NET_1D&quot;, &quot;YLD_CHG_NET_1M&quot;, &quot;INTERVAL_Z_SCORE&quot;, &quot;MTY_YEARS_TDY&quot;, &quot;YLD_CHG_NET_5D&quot;) df &lt;- bdp(securities = bonds, fields = fields) df &lt;- tibble::rownames_to_column(df, &quot;isin_govt&quot;) 1.7 R Markdown 1.7.1 Render multiple reports Render multiple reports in different folders. In the example below one report is created for each stated currency. Params = list(currency) is the key. #Write in one R Script #Remove old file.remove(&quot;...xxx/report/Benchmark_R/Portfolio_report_GBP.html&quot;) file.remove(&quot;...xxx/report/Benchmark_R/Portfolio_report_AUD.html&quot;) file.remove(&quot;...xxx/report/Benchmark_R/Portfolio_report_EUR.html&quot;) purrr::map( c(&quot;AUD&quot;, &quot;EUR&quot;, &quot;GBP&quot;), ~ { res &lt;- rmarkdown::render(&quot;...xxx\\\\report\\\\Benchmark_R\\\\R code\\\\Markdown BM.Rmd&quot;, output_file = sprintf(&quot;...xxx\\\\report\\\\Benchmark_R\\\\Portfolio_report_%s.html&quot;, .x), params = list(currency = .x)) file.copy(res, sprintf(&quot;...xxx\\\\report\\\\Benchmark_R\\\\Old_reports\\\\Portfolio_report_%1$s_%2$s.html&quot;, .x, Sys.Date())) file.copy(res, sprintf(&quot;...xxx/report/Benchmark_R//Portfolio_report_%s.html&quot;, .x)) } ) #Markdown Report header --- #title: &quot;Portfolio and benchmark report&quot; output: html_document date: &quot;`r Sys.Date()`&quot; author: christoffer.nordenlow@outlook.com params: currency: &quot;EUR&quot; title: &quot;`r sprintf(&#39;Portfolio and benchmark report, %s&#39;, params$currency)`&quot; --- 1.8 Web Scraping 1.8.1 Scrape all sub page Scrape web page info and save in a table Scrape all different sub web pages under a base page. In the below example there a number of sub pages under the base bage. R is scraping all different URL under the main page. Info in the tables under the sub pages are saved in a table. You will need to have HTTP_PROXY/HTTPS_PROXY as environment variables. #https://cran.r-project.org/web/packages/rvest/rvest.pdf require(rvest) require(xml2) require(tidyverse) .base_url &lt;- &quot;https://www.riksbank.se&quot; doc &lt;- read_html(file.path(.base_url, &quot;sv/penningpolitik/penningpolitiska-instrument/kop-av-foretagscertifikat/special-terms-and-conditions/&quot;)) urls &lt;- doc %&gt;% html_nodes(&quot;a&quot;) %&gt;% html_attr(&quot;href&quot;) urls &lt;- urls[str_detect(urls, regex(&quot;.*/special-terms-and-conditions/.*bid-date.*$&quot;))] urls &lt;- file.path(.base_url, urls) names(urls) &lt;- basename(urls) doc_subpage &lt;- read_html(urls[[1]]) df &lt;- urls %&gt;% map_dfr(~{ doc_subpage %&gt;% html_node(&quot;table&quot;) %&gt;% html_table() %&gt;% rename(key=X1, value=X2) %&gt;% as_tibble() }, .id = &quot;url&quot;) #It is possible to filter which files should be imported. #map(...) %&gt;% filter(lubridate::year(date) == 2019) 1.8.2 Scrape PL table Scrape one table library(rvest) web_pl &lt;- read_html(&quot;https://www.foxsports.com/soccer/stats?competition=1&amp;season=20190&amp;category=standard&amp;sort=3&quot;) tbls &lt;- html_nodes(web_pl, &quot;table&quot;) head(tbls) pl_stats &lt;- web_pl %&gt;% html_nodes(&quot;table&quot;) %&gt;% # .[3:4] %&gt;% html_table(fill = TRUE)%&gt;% .[[1]] 1.8.3 Scrape all tables Scrape all tables, use one ##Web scrape US Data. Payroll #http://bradleyboehmke.github.io/2015/12/scraping-html-tables.html library(rvest) web_bls &lt;- read_html(&quot;http://www.bls.gov/web/empsit/cesbmart.htm&quot;) tbls &lt;- html_nodes(web_bls, &quot;table&quot;) #extract all table nodes that exist on the page. head(tbls) #To parse the HTML, we use html_table. In this example it creates table_bls &lt;- web_bls %&gt;% html_nodes(&quot;table&quot;) %&gt;% .[3:4] %&gt;% ##determines which tables. In this case, table 3 and 4. html_table(fill = TRUE) str(table_bls) #Extract table 2, non-farm head(table_bls[[2]], 4) # remove row 1 that includes part of the headings. Not neccessary here #table_bls[[2]] &lt;- table_bls[[2]][-1,] table_bls2 &lt;-table_bls[[2]] 1.8.4 Scrape title Scrape title library(rvest) lego_movie &lt;- read_html(&quot;http://www.imdb.com/title/tt1490017/&quot;) lego_movie %&gt;% html_node(xpath=&#39;//div[@class=&quot;originalTitle&quot;]&#39;) %&gt;% html_text() 1.9 Useful functions / expressions 1.9.1 Sub / Gsub Replace the first occurence of a pattern with a sub or replace all occurrences with gsub. Gsub() replaces all matches of a string. x &lt;- &quot;Old City&quot; gsub(&quot;Old&quot;, &quot;New&quot;, x) #case insensitive gsub(&quot;old&quot;, &quot;New&quot;, x, ignore.case=T) #Vector replacement y &lt;- c(&quot;Stockholm City&quot;, &quot;Uppsala City&quot;, &quot;Malmö&quot;) gsub(&quot; City&quot;,&quot;&quot;,y) ### rnorm Generate number from a normal distribution. rnorm(4) #&gt; [1] -2.3308287 -0.9073857 -0.7638332 -0.2193786 # Use a different mean and standard deviation rnorm(4, mean=50, sd=10) #&gt; [1] 59.20927 40.12440 44.58840 41.97056 # To check that the distribution looks right, make a histogram of the numbers x &lt;- rnorm(400, mean=50, sd=10) hist(x) 1.9.2 slice Example: way to take out a single row. library(dplyr) mtcars select_row = 1 df &lt;- arrange(mtcars, mpg) df2 &lt;- df %&gt;% slice(which(row_number() == select_row)) 1.9.3 unique Example: get all unique values in a column library(dplyr) library(data.table) df &lt;- mtcars unique(df$cyl, incomparables = FALSE) 1.9.4 Map (purrr) Apply a function to each element of as list or vector. https://purrr.tidyverse.org/reference/map.html # map_dfr # apply a function to each element library(tidyverse) leading_indicators &lt;- c( &quot;INJCJC Index&quot;, &quot;INJCJC4 Index&quot;, &quot;INJCSP Index&quot;, &quot;RSTAMOM Index&quot;, &quot;SAARTOTL Index&quot;, &quot;USHBTRAF Index&quot;, &quot;DGNOCHNG Index&quot;, &quot;DGNOYOY Index&quot;, &quot;LEI CHNG Index&quot; ) get_data &lt;- function(indicator) { tibble(ind = indicator, data = 1) } leading_indicators %&gt;% map_dfr(get_data) "],
["excel-vba.html", "2 Excel &amp; VBA 2.1 Import 2.2 Loops 2.3 Misc 2.4 Useful excel formulas 2.5 Useful Bloomberg formulas", " 2 Excel &amp; VBA 2.1 Import 2.1.1 Standard way to import file Sub import_file() &#39;Code to delete old data and to import new file Application.ScreenUpdating = False Application.DisplayAlerts = False Sheets(&quot;location_file&quot;).ClearContents TheHomeFile = ActiveWorkbook.Name Path = &quot;\\\\riksbank.se\\profile\\home\\chnord\\My Documents\\test\\&quot; Name = &quot;likvprog_history.txt&quot; Workbooks.OpenText Filename:= _ Path &amp; Name, Local:=True Range(&quot;a1:z10000&quot;).Copy Workbooks(TheHomeFile).Activate Sheets(&quot;likvprog_history&quot;).Select Range(&quot;a1&quot;).PasteSpecial xlValues Workbooks(Name).Close savechanges:=False Sheets(&quot;main&quot;).Select Application.CutCopyMode = False End Sub 2.1.2 Import file with conditions Import files after a certain date. Check if file exists before import. Sub import_file() Application.ScreenUpdating = False Application.DisplayAlerts = False Sheets(&quot;location_file&quot;).ClearContents #Input files after this date from_date = &quot;2020-05-01&quot; current_date = from_date TheHomeFile = ActiveWorkbook.Name Path = &quot;xxx\\home\\chnord\\My Documents\\test\\&quot; Do Until Format(current_date, &quot;YYYY-MM-DD&quot;) &gt;= Format(to_date, &quot;YYYY-MM-DD&quot;) Name = current_date &amp; &quot; Saldo.csv&quot; &#39;&#39;check if file exists file_exists = False If Dir(Path &amp; Name) &lt;&gt; &quot;&quot; Then file_exists = True If file_exists = True Then Workbooks.OpenText Filename:= _ Path &amp; Name, Local:=True Range(&quot;a1:z10000&quot;).Copy Workbooks(TheHomeFile).Activate Sheets(&quot;likvprog_history&quot;).Select Range(&quot;a1&quot;).PasteSpecial xlValues Workbooks(Name).Close savechanges:=False end if current_date = DateAdd(&quot;d&quot;, 1, current_date) Loop Application.CutCopyMode = False End Sub 2.2 Loops 2.2.1 For loop Loop thru all possible scenarios. Loop All alternatives. In Rows 2:4 there are three alternatives in each column. Loop all possible scenarios. sub for_loop_all_alternatives Sheets(&quot;sheet1&quot;).Select Sheets(&quot;sheet1&quot;).Range(&quot;c2:k2&quot;) = 1 Sheets(&quot;sheet1&quot;).Range(&quot;c3:k4&quot;) = 2 Sheets(&quot;sheet1&quot;).Range(&quot;c4:k4&quot;) = 3 Count = 1 Row = 7 For c = 2 To 4 For d = 2 To 4 For e = 2 To 4 For f = 2 To 4 For g = 2 To 4 For h = 2 To 4 For i = 2 To 4 For j = 2 To 4 For k = 2 To 4 Cells(Row, 2) = Count Cells(Row, 3) = Range(&quot;c&quot; &amp; c) Cells(Row, 4) = Range(&quot;d&quot; &amp; d) Cells(Row, 5) = Range(&quot;e&quot; &amp; e) Cells(Row, 6) = Range(&quot;f&quot; &amp; f) Cells(Row, 7) = Range(&quot;g&quot; &amp; g) Cells(Row, 8) = Range(&quot;h&quot; &amp; h) Cells(Row, 9) = Range(&quot;i&quot; &amp; i) Cells(Row, 10) = Range(&quot;j&quot; &amp; j) Cells(Row, 11) = Range(&quot;k&quot; &amp; k) Count = Count + 1 Row = Row + 1 Next Next Next Next Next Next Next Next Next End Sub 2.3 Misc 2.3.1 Misc Format from text to number Format from text to number when excel “requires” a press of enter button. or Each r In Sheets(&quot;Sheet1&quot;).UsedRange.SpecialCells(xlCellTypeConstants) If IsNumeric(r) Then r.Value = CSng(r.Value) r.NumberFormat = &quot;0.00&quot; End If Next Format from , to . even though it´s auto changing to , Format from text to number when excel “requires” a press of enter button. Const myDecSep As String = &quot;.&quot; Sub changeformats() &#39;https://stackoverflow.com/questions/42532857/vba-display-decimals-with-point-and-not-coma Dim S As String Dim D As Double Const myDecSep As String = &quot;.&quot; D = 1234.56 S = Format(D, &quot;0.00&quot;) &#39;will format using the system separator S = Replace(S, Application.DecimalSeparator, myDecSep) &#39;Range(&quot;e1&quot;) = S MsgBox S End Sub 2.4 Useful excel formulas 2.5 Useful Bloomberg formulas Import Rating with override function &#39;Approah to import rating for specific date =BDP(&quot;SAND SS equity&quot;;&quot;RTG_SP_LT_LC_ISSUER_CREDIT&quot;;&quot;RATING_AS_OF_DATE_OVERRIDE=&quot;&amp;&quot;2020-01-01&quot;) Formula for importing data to excel &#39;Import data from Bloomberg, 2 cols. =BDH(&quot;INJCJC Index&quot;;&quot;px_last&quot;;&quot;2015-07-02&quot;;&quot;&quot;;&quot;Dir=V&quot;;&quot;Dts=S&quot;;&quot;Sort=d&quot;;&quot;Quote=C&quot;;&quot;QtTyp=Y&quot;;&quot;Days=a&quot;;&quot;Per=cd&quot;;&quot;DtFmt=D&quot;;&quot;Fill=P&quot;;&quot;UseDPDF=Y&quot;;&quot;cols=2;rows=1826&quot;) Formula importing all outstanding bonds &#39;Import data from Bloomberg. BQL. =BQL(&quot;bonds([&#39;1179Z SS Equity&#39;, &#39;SHBA SS Equity&#39;, &#39;1684Z SS Equity&#39;, &#39;1060Z SS Equity&#39;, &#39;1000161Z SS Equity&#39;, &#39;753385Z SS Equity&#39;, &#39;1498692D SS Equity&#39;, &#39;SEBA SS Equity&#39;, &#39;140362Z SS Equity&#39;])&quot;;&quot;id_isin().value, name().value, long_comp_name().value, amt_outstanding().value, crncy().value, series().value, payment_rank().value, cpn_typ().value, maturity().value&quot;;&quot;cols=10;rows=2136&quot;) "],
["fi-fx.html", "3 FI &amp; FX 3.1 Fixed Income 3.2 Foreign Exchange", " 3 FI &amp; FX 3.1 Fixed Income 3.1.1 Bond Calculator in R 3.1.1.1 Calculate Forward Rates Calculate Forward Rates Create a table with bond (or import real ones) and calculate forward rates. library(dplyr) #Calculate Forward rate #Create a table with plain vanilla bonds df &lt;- tribble( ~bond, ~maturity, ~yield, 1, 1.5, 1.65, 2, 3, 1.55, 3, 5, 1.8, 4, 10, 1.9 ) #Create table with all bonds in columns for short vs long bond df &lt;- df %&gt;% mutate(dummy = 1L) %&gt;% inner_join(., ., by = &quot;dummy&quot;, suffix=c(&quot;_short&quot;, &quot;_long&quot;)) %&gt;% select(-dummy) %&gt;% filter(bond_short &lt; bond_long) #Create column with maturity for length between bonds (not neccesary for below calculation) df &lt;- mutate(df, maturity_between_bonds = (maturity_long - maturity_short)) day_count &lt;- 360 #Create function for calculating frw rate calculate_forward_rate &lt;- function(maturity_short, yield_short, maturity_long, yield_long, day_count){ short_bond &lt;- (1+yield_short/100)^(maturity_short/day_count) long_bond &lt;- (1+yield_long/100)^(maturity_long/day_count) days_between &lt;- (maturity_long - maturity_short) forward_rate &lt;- ((long_bond/short_bond)^(360/days_between)-1)*100 return(round(forward_rate, digits=2)) } #run function df &lt;- df %&gt;% mutate(forward_rate = calculate_forward_rate( maturity_short, yield_short, maturity_long, yield_long, day_count)) #Create a yield_diff. How much more/less the yield must be when its time to buy the subsequent bond df &lt;- df %&gt;% mutate(yield_diff = if_else(bond_short == bond_long, NA_real_, forward_rate - yield_short)) 3.1.1.2 Bond Converter Calculate Bond Price Maturity &lt;- &quot;2023-04-30&quot; Handle &lt;- 100 x32 &lt;- 25 x64 &lt;- 24 cpn &lt;- 2.25 ttm &lt;- as.numeric(as.Date(Maturity) - as.Date(Sys.Date())) / 365 FV &lt;- 100 calculate_price &lt;- function(Handle, x32, x64){ bond_price &lt;- Handle + ((x32+(x64/64))/32) return(format(round(bond_price,10), nsmall=10)) } bond_price &lt;- as.numeric(calculate_price(Handle, x32, x64)) Convert from Discount to Yield discount &lt;- 1.69 maturity_date &lt;- as.Date(&quot;2021-05-06&quot;) settlement_date &lt;- Sys.Date() +1 day_count &lt;- 360 calculate_ytm_from_discount &lt;- function(discount, maturity_date, settlement_date, day_count){ days &lt;- as.numeric(maturity_date-settlement_date) discount &lt;- discount / 100 yield_ &lt;- (discount / (1-(discount * (days/day_count)))) return(format(round(yield_*100,10),nsmall=10)) } calculate_ytm_from_discount(discount, maturity_date, settlement_date, day_count) Convert from Yield to Discount yield &lt;- 1.719967 maturity_date &lt;- as.Date(&quot;2021-05-06&quot;) settlement_date &lt;- Sys.Date()+1 day_count &lt;- 360 yield &lt;- yield / 100 calculate_disc_from_yield &lt;- function(yield, maturity_date, settlement_date, day_count){ days &lt;- as.numeric(maturity_date-settlement_date) discount &lt;- (yield / (1+(yield /(day_count/days)))) return(format(round(discount*100,10),nsmall=10)) } calculate_disc_from_yield(yield, maturity_date, settlement_date, day_count) 3.2 Foreign Exchange "],
["sql.html", "4 SQL 4.1 General 4.2 Setting up a database 4.3 Useful expressions 4.4 SQL databases and R", " 4 SQL 4.1 General https://www.w3schools.com/sql/default.asp ‘Getting started with SQL’ using SQLite. Download database found in link by vlicking the ZIP button and copy the contents to a folder of choice. The navigate in the top menu to Database -&gt; add a database. https://github.com/thomasnield/oreilly_getting_started_with_sql 4.1.1 SELECT SELECT * FROM CUSTOMER; SELECT CUSTOMER_ID, NAME FROM CUSTOMER; # Generate a calculated column SELECT PRODUCT_ID, DESCRIPTION, PRICE AS UNTAXED_PRICE, round(PRICE * 1.07,2) AS TAXED_PRICE FROM PRODUCT; # Text concatenation. Concatenation works with any data type. SELECT NAME, CITY || &#39;, &#39; || STATE AS LOCATION FROM CUSTOMER; 4.1.2 WHERE SELECT * FROM STATION_DATA WHERE year = 2010; #Use != or &lt;&gt; to get everything but 2010 SELECT * FROM STATION_DATA WHERE year != 2010; #AND, OR, IN statements SELECT * FROM STATION_DATA WHERE year &gt;= 2005 AND year &lt;= 2010; #in SELECT * FROM STATION_DATA WHERE MONTH IN (3,6,9,12) #not in SELECT * FROM STATION_DATA WHERE MONTH NOT IN (3,6,9,12) #modulus operator #modulus returns the remainder instead of the quotient. A remainder of 0 means there is no remainder at all SELECT * FROM STATION_DATA WHERE MONTH % 3 = 0 #using where on text SELECT * FROM STATION_DATA WHERE report_code in (&#39;513A63&#39;, &#39;1F8A7B&#39;) SELECT * FROM STATION_DATA WHERE length(report_code) = 6 #wildcards SELECT * FROM STATION_DATA WHERE report_code LIKE &#39;A%&#39; #B as the first, C as the third letter SELECT * FROM STATION_DATA WHERE report_code LIKE &#39;B_C%&#39; #Other text functions as INSTR, SUBSTR, REPLACE ETC SELECT * FROM station_data WHERE snow_depth IS NULL; #Use coalesce to conert NULL to 0, &quot;N/A&quot; etc SELECT * FROM station_data WHERE coalesce(precipitation,0) &lt;= 0.5; SELECT * FROM station_data WHERE (rain = 1 AND temperature &lt;= 32) OR snow_depth &gt; 0; 4.1.3 GROUP BY WHERE filters individual records while HAVING filters aggregations. SELECT year, month, COUNT(*) AS record_count FROM station_data WHERE tornado = 1 GROUP BY year, month ORDER BY year, month #aggregate SELECT month, AVG(temperature) as avg_temp FROM station_data WHERE year &gt;= 2000 GROUP BY month #HAVING statement #To be able to filter on aggregate data you need to use HAVING instead of WHERE SELECT year, SUM(precipitation) as total_precipitation FROM station_data GROUP BY year HAVING sum(precipitation) &gt; 30 4.1.4 CASE statements CASE statements are read from top to bottom, so the first true condition is the one it uses. A great benefit of CASE statements compared to WHERE is that you can apply different filters for different aggregate values. SELECT report_code, year, month, day, wind_speed, CASE WHEN wind_speed &gt;= 40 THEN &#39;HIGH&#39; WHEN wind_speed &gt;= 30 THEN &#39;MODERATE&#39; ELSE &#39;LOW&#39; END as wind_severity FROM station_data # Use of CASE to apply different filters SELECT year, month, SUM(CASE WHEN tornado = 1 THEN precipitation ELSE 0 END) as tornado_precipitation, SUM(CASE WHEN tornado = 0 THEN precipitation ELSE 0 END) as non_tornado_precipitation FROM station_data GROUP BY year, month # Use of boolean expression SELECT month, AVG(CASE WHEN rain OR hail THEN temperature ELSE null END) AS avg_precipitation_temp, AVG(CASE WHEN NOT (rain OR hail) THEN temperature ELSE null END) AS avg_non_precipitation_temp FROM station_data WHERE year &gt; 2000 GROUP BY month 4.1.5 JOIN In multiple joins, it may be erroundous to mix LEFT JOIN with INNER JOIN. This is becasue null values cannot be inner joined on and will get filtered out. LEFT JOIN tolerates null values. #INNER JOIN SELECT ORDER_ID, CUSTOMER.CUSTOMER_ID, ORDER_DATE, ORDER_QTY FROM CUSTOMER INNER JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID #LEFT JOIN SELECT ORDER_ID, CUSTOMER.CUSTOMER_ID, ORDER_DATE, ORDER_QTY FROM CUSTOMER LEFT JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID #Checking for NULL values SELECT CUSTOMER.CUSTOMER_ID, NAME AS CUSTOMER_NAME FROM CUSTOMER LEFT JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID WHERE ORDER_ID IS NULL #Multiple joins SELECT ORDER_ID, CUSTOMER.CUSTOMER_ID, &#39;NAME AS CUSTOMER.NAME,&#39; STREET_ADDRESS, CITY, STATE, ZIP, ORDER_DATE, PRODUCT_ID, DESCRIPTION, ORDER_QTY FROM CUSTOMER INNER JOIN CUSTOMER_ORDER ON CUSTOMER_ORDER.CUSTOMER_ID = CUSTOMER.CUSTOMER_ID INNER JOIN PRODUCT ON CUSTOMER_ORDER.PRODUCT_ID = PRODUCT.PRODUCT_ID #Use coalesce() to turn nulls into zeros. SELECT CUSTOMER.CUSTOMER_ID, NAME AS CUSTOMER_NAME, coalesce(sum(ORDER_QTY * PRICE), 0) as TOTAL_REVENUE FROM CUSTOMER LEFT JOIN CUSTOMER_ORDER ON CUSTOMER.CUSTOMER_ID = CUSTOMER_ORDER.CUSTOMER_ID LEFT JOIN PRODUCT ON CUSTOMER_ORDER.PRODUCT_ID = PRODUCT.PRODUCT_ID GROUP BY 1,2 4.2 Setting up a database Always strive to gave a primary key on every table, which provides a unique identify to each record. Foreign key in a child table points to the primary key in its parent table. A database schema is a diagram showing tables, their columns, and their relationships. 4.2.1 Creating tables #Autoincrement allows a unique number to be generated automatically when a new record is inserted into a table. Not needed for SQLite, but for MySQL and some other platforms. #Allowing fields to be NULL can be done for fields that are not mandatory, while using NOT NULL should be done for fields that needs to be populated. CREATE TABLE COMPANY ( COMPANY_ID INTEGER PRIMARY KEY AUTOINCREMENT, NAME VARCHAR(30) NOT NULL, DESCRIPTION VARCHAR(60), PRIMARY_CONTACT_ID INTEGER NOT NULL ); CREATE TABLE ROOM ( ROOM_ID INTEGER PRIMARY KEY AUTOINCREMENT, FLOOR_NUMBE INTEGER NOT NULL, SEAT_CAPASITY INTEGER NOT NULL ); CREATE TABLE PRESENTATION ( PRESENTATION_ID INTEGER PRIMARY KEY AUTOINCREMENT, BOOKED_COMPANY_ID INTEGER NOT NULL, BOOK_ROOM_ID INTEGER NOT NULL, START_TIME TIME, END_TIME TIME ); CREATE TABLE ATTENDEE ( ATTENDEE_ID INTEGER PRIMARY KEY AUTOINCREMENT, FIRST_NAME VARCHAR (30) NOT NULL, LAST_NAME VARCHAR (30) NOT NULL, PHONE INTEGER, EMAIL VARCHAR (30), VIP BOOLEAN DEFAULT(0) &#39;BOOLEAN MAKE DEFAULT FALSE (0)&#39; ); CREATE TABLE PRESENTAION_ATTENDANCE ( TICKET_id INTEGER PRIMARY KEY AUTOINCREMENT, PRESENTATION_ID INTEGER, ATTENDEE_ID INTEGER ); #Foreign keys in a child table should be tied to primary key of a parent table. Setting up foreign keys by double clicking on the varible to modify and link this to a primary key of a parent table. 4.2.2 Creating views Creating views stores querys in the database so it can easily be called upon. CREATE VIEW PRESENTATION_VW AS SELECT COMPANY.NAME AS BOOKED_COMPANY, ROOM.ROOM_ID AS ROOM_NUMBER, ROOM.FLOOR_NUMBE AS FLOOR, ROOM.SEAT_CAPASITY AS SEATS, START_TIME, END_TIME FROM PRESENTATION INNER JOIN COMPANY ON PRESENTATION.BOOKED_COMPANY_ID = COMPANY.COMPANY_ID INNER JOIN ROOM ON PRESENTATION.BOOK_ROOM_ID = ROOM.ROOM_ID; # Queryn from a view SELECT * FROM PRESENTATION_VW WHERE SEAT_CAPACITY &gt;= 30 4.2.3 Populating database 4.2.3.1 INSERT INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME) VALUES (&#39;THOMAS&#39;, &#39;NIELD&#39;) SELECT * FROM ATTENDEE #Multiple inserts. Can be used with Python to populate large amounts of data. INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME, PHONE, EMAIL, VIP) VALUES (&#39;Jon&#39;, &#39;Skeeter&#39;, 3525253523, &#39;john.skeeter@rex.net&#39;, 1), (&#39;Sam&#39;, &#39;Jones&#39;, 25235235235, &#39;sam.jones@hej.se&#39;, 0), (&#39;Karl&#39;, &#39;Andersson&#39;, 5235235, &#39;karl.andersson@gmail.com&#39;,1) #Inserting with a SELECT from another table INSERT INTO ATTENDEE (FIRST_NAME, LAST_NAME, PHONE, EMAIL) SELECT FIRST_NAME, LAST_NAME, PHONE, EMAIL FROM ANOTHER_TABLE 4.2.3.2 DELETE Combining DELETE with WHERE. It could be good to replace DELETE with SELECT to get a preview what will be deleted. DELETE FROM ATTENDEE WHERE PHONE IS NULL AND EMAIL IS NULL # On some platforms the preferred way to delete all records from a table is to use TRUNCATE TABLE. 4.2.3.3 UPDATE UPDATE modifies existing records. UPDATE ATTENDEE SET FIRST_NAME = UPPER(FIRST_NAME), LAST_NAME = UPPER(LAST_NAME) UPDATE ATTENDEE SET VIP = 1 WHERE ATTENDEE_ID IN (3,4) 4.2.4 Connecting to database from R Connecting to the database from R. #https://db.rstudio.com/dplyr/ library(dplyr) library(DBI) library(RSQLite) con &lt;- dbConnect(SQLite(), &quot;C:\\\\Users\\\\chris\\\\Documents\\\\oreilly_getting_started_with_sql-master\\\\surgetech_conferencev2.db&quot;) #Show list of table as.data.frame(dbListTables(con)) #get data in data frame with sql syntax df &lt;- data.frame(tbl(con, sql(&quot;SELECT * FROM ATTENDEE&quot;))) #with dplyr syntax df2 &lt;- data.frame(tbl(con, &quot;ATTENDEE&quot;)) # When data is fetched, disconnect to db. dbDisconnect(con) 4.3 Useful expressions Operator Description Example abs() Calculates the absolute value abs(x) coalesce() Converts a possible null value into a default coalesce(z,y) instr() Checks if a text string contains another text string instr(‘HTX’, ‘TX’) length() Provides the number of characters in a string length(‘Test’) trim() Removes extraneous on both sides of a string trim(’ Test ’) ltrim() Removes extraneous on the left side of a string ltrim(’ Test’) rtrim() Removes extraneous on the right side of a string rtrim(‘Test’) random() Returns a random number random() round() Rounds a decimal to specified number round(100.101, 2) replace() Replaces a substring of text in a string replace(‘Test df’, ’ df’, ’’) substr() Extracts a range of characters from a string with their num position substr(‘Test’, 2,3) lower() Turns all letters in a string to lowercase lower(‘Test’) upper() Turns all letters in a string to uppercase upper(‘Test’) 4.4 SQL databases and R 4.4.1 Connecting to a database from R Access a database from R. The problem with dplyr is that all operations are conducted in-memory and thus the amount of data you can work with is limited by available memory. The database connection essentially removes that limitation. Accessing a temp database by downloading it. Dplyr and dbplyr are used in R to point to the database. #https://datacarpentry.org/R-ecology-lesson/05-r-and-databases.html library(&quot;RSQLite&quot;) library(&quot;plyr&quot;) library(&quot;dbplyr&quot;) # Downloading database for test dir.create(&quot;data_raw&quot;, showWarnings = FALSE) download.file(url = &quot;https://ndownloader.figshare.com/files/2292171&quot;, destfile = &quot;data_raw/portal_mammals.sqlite&quot;, mode = &quot;wb&quot;) # Connect to databse mammals &lt;- DBI::dbConnect(RSQLite::SQLite(), &quot;data_raw/portal_mammals.sqlite&quot;) # Querying with SQL-syntax vs dplyr syntax #sql tbl(mammals, sql(&quot;SELECT year, species_id, plot_id FROM surveys&quot;)) #dplyr surveys &lt;- tbl(mammals, &quot;surveys&quot;) surveys %&gt;% select(year, species_id, plot_id) #Checking head(surveys, n = 10) and nrow(surveys) we see that the surveys at first glance looks like a data frame but there are some differences.* head(surveys, n = 10) nrow(surveys) #The reason for this is that dplyr dosen´t see the full dataset, only what was asked for when the question in dplyr was translated into SQL. 4.4.2 Running SQL syntax in R library(sqldf) #https://dept.stat.lsa.umich.edu/~jerrick/courses/stat701/notes/sql.html#introduction sqldf(&#39;SELECT age, circumference FROM Orange WHERE Tree = 1 ORDER BY circumference ASC&#39;) sqldf(&quot;SELECT * FROM iris&quot;) #example data(BOD) BOD #Wildcard: used to extract everything bod2 &lt;- sqldf(&#39;SELECT * FROM BOD&#39;) bod2 #LIMIT controls the number of results sqldf(&#39;SELECT * FROM iris LIMIT 5&#39;) #ORDER BY syntax: ORDER BY var1 {ASC/DESC}, var2 {ASC/DESC} sqldf(&quot;SELECT * FROM Orange ORDER BY age ASC, circumference DESC LIMIT 5&quot;) #Where can be used to add conditional statements sqldf(&#39;SELECT demand FROM BOD WHERE Time &lt; 3&#39;) #WHERE with AND and OR sqldf(&#39;SELECT * FROM rock WHERE (peri &gt; 5000 AND shape &lt; .05) OR perm &gt; 1000&#39;) #IN is used to similiar to %in% sqldf(&#39;SELECT * FROM BOD WHERE Time IN (1,7)&#39;) sqldf(&#39;SELECT * FROM BOD WHERE Time NOT IN (1,7)&#39;) #LIKE weak expression command sqldf(&#39;SELECT * FROM chickwts WHERE feed LIKE &quot;%bean&quot; LIMIT 5&#39;) sqldf(&#39;SELECT * FROM chickwts WHERE feed NOT LIKE &quot;%bean&quot; LIMIT 5&#39;) #Aggregated data: AVG, MEDIAN, MAX, MIN, SUM sqldf(&quot;SELECT AVG(circumference) FROM Orange&quot;) #SELECT COUNT d &lt;- data.frame(a = c(1,1,1), b = c(1,NA,NA)) d sqldf(&quot;SELECT COUNT() as numrows FROM d&quot;) sqldf(&quot;SELECT COUNT(b) FROM d&quot;) "],
["html-css-and-javascript.html", "5 HTML, CSS and JavaScript 5.1 HTML 5.2 CSS 5.3 JavaScript", " 5 HTML, CSS and JavaScript 5.1 HTML https://www.w3schools.com/tags/ref_byfunc.asp th { text-align: left; } Tag Description !DOCTYPE Defines the document type html Defines an HTML document head Contains information for the document title Defines a title body Defines the documents body h1 to h6 Defines headings p Defines a paragraph br Inserts a single break hr Defines a thematic change in the content span and div A div is a block-level element and a span is an inline element. Div should be used to wrap sections of a document, while span to wrap small portions of text, imgages etc. HTML is made up of a structure of elements which acts like a set of instructions for a web browser. &lt;!-- Doctype declares which dialects of HTML that is used. In this case HTML5 --&gt; &lt;!DOCTYPE HTML&gt; &lt;!-- &lt;html&gt; is the parent element for the page. All other elements are nested within this. &lt;html&gt; always has two child elements: &lt;head&gt; and &lt;body&gt;. --&gt; &lt;html&gt; &lt;!-- &lt;head&gt; element contains information about the web page such as its title, links to other resources etc. Nothing in the this element is visible on the page. --&gt; &lt;head&gt; &lt;title&gt; Web Page Test&lt;/title&gt; &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;1,300&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;!-- &lt;body&gt; element takes care of the actual visible content on the page. --&gt; &lt;body&gt; &lt;header&gt; &lt;nav&gt;Home | About | Contact &lt;/nav&gt; &lt;hgroup&gt; &lt;h1&gt;Web page test&lt;/h1&gt; &lt;h2&gt;Not very complexed&lt;/h2&gt; &lt;/hgroup&gt; &lt;/header&gt; &lt;/body&gt; &lt;/html&gt; 5.2 CSS There are two ways to include CSS in the HTML document. Embedded style sheet is one where all of the selectors and style rules appear in the “head” element of the HTML. With an external style sheet, CSS is written in a separate file and then linked. &lt;head&gt; &lt;title&gt; Web Page Test&lt;/title&gt; &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;1,300&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt; &lt;style&gt; body { font-family:&quot;Lato&quot;; } #wrapper { width: 80%; height: auto; margin-left: auto; margin-right: auto; } section { width: 70%; height: auto; float: left; } aside { width: 30%; float: right; } footer { width: 100%; height: auto; float:left; } h1 { font-weight: bold; font-size: 26px; color:#990000; } hgroup &gt; h1 { margin-bottom: 3px; } #homepageImage { float:left; border-style:none; } &lt;/style&gt; &lt;/head&gt; 5.3 JavaScript Sublime can be used as a starting IDE. Link scripts to page. Write the script in a separate file and save with a .js filename. The script is then lnked to a page using the src attribute of the script element. https://www.fincher.org/tips/Languages/javascript.shtml 5.3.1 Operators th { text-align: left; } Operator Description Example ?? Returns true if both operands evaluate to true true &amp;&amp; false (false) || Returns true if either operand evaluates to true, otherwise false if (x == y || y &gt; z) ! Inverts the boolean value of the operand !true (false) 5.3.2 Keywords JavaScript defines a set of keywords known as reserved words, these include: break, case, catch, continue, default, delete, do, else, false, finally, for, function, if, in, instanceof, new, null, return, switch, this, throw, true, try, typeof, var, void, while, with. th { text-align: left; } Keyword Description Example var The “var” keyword tells the browser to create variables. var x,y; this The “this” keyword refers to the object it belongs to. fullName : function() { return this.firstName + \" \" + this.lastName; } const For varibles that don´t change, we use const. const taxRate = 0.3050 5.3.3 Anatomy All JavaScript instructions are contained within statements. Related statements can be grouped together into a block by wrapping the statement in braces. 5.3.3.1 Conditional statements //Multiple statements if(condition) { statement_1; statement_2; statement_3; } //Else clause if(condition) { statement(s); } else { statement(s); } //Else if clause. Branching logical structure can get very complex. if(condition) { statement(s); } else if(condition) { statement(s); } //example var balance = 400; if(balance &lt; 0.0){ status= &quot;bankrupt&quot;; } else if(balance &lt; 100.0) { status = &quot;ok&quot;; } else { status = &quot;rich&quot;; } document.write(&quot;customer is &quot; +status) //Switch statement switch(condition) { case label_1: statement(s); break; case label_2: statement(s); break; default: statement(s); break; } //switch examplevar flavor = &quot;vanilla&quot;; switch(flavor) { case &quot;chocolate&quot;: document.write(&quot;I like chocolate too.&quot;); break; case &quot;strawberry&quot;: document.write(&quot;Strawberry is for sissies.&quot;); break; case &quot;vanilla&quot;: document.write(&quot;Vanilla is boring.&quot;); //no break statement so control will continue to the statement below default: document.write(&quot;Ice cream is cool.&quot;); } 5.3.3.2 Loops //While loops while(condition) { statement(s); } //example var total = 1; while(total &lt; 100) { document.write(total+&quot;,&quot;); total = total * 2; } //Do while do { statement(s); } while(condition); //For loops for(initialize ; condition ; iteration) { statement(s); } //Go to (should be used carefully) for(var i=0; i &lt; 2; i++) { outerloop: for(var j=0; j &lt; 10; j++) { if(j &gt; 3) { break outerloop; } document.write(&quot; &quot;+i+j+&quot;, &quot;); } } Loop: existing a loop for(var i=0; i&lt;100; i++) { document.write(i); if(i &gt; 5) { break; } } 5.3.4 Functions and classes 5.3.4.1 Named and anonymous functions Using anonymous functions we use a variable name instead of a function name. //Named function function calculateRectArea(rectWidth, rectHeight) { return(rectWidth * rectheight) } //Anonymous function var calculateRectHypotenuse = function(rectWidth, rectHeight) { var widthsquared = rectWidth * rectWidth; var heigthSquared = rectHeight * rectHeight; return(Math.sqrt(widthSquared + heightSquared)); } //calling var myRectArea = calculateRectArea(49, 28); var myRectHypotenuse = calculateRectHypotenuse(49,28); Anonymous function ´´´html &lt;!DOCTYPE html&gt; A Simple Quiz &lt;script type=&quot;text/javascript&quot;&gt; var anonbutton = document.getElementById(&quot;anonbutton&quot;); anonbutton.onclick = function() { alert(&quot;anonymous function called.&quot;); } &lt;/script&gt; ´´´ 5.3.4.2 Namespace Namespaces are notional spaces or contexts in which a set of names can be defined, to avoid name clashed. Two names can be identical as long as they exist in different namespace. //Creating a namespace in js script. It is a good practise to include your namespace declaration in top of all your scripts. Functions needs to be anonymous. //First we create an object called com inside the global namespace, and then we create an object called flametreepublishing inside the com project. // After declaring, but not initializing, we test that each namespace object does not exist before using it. var com; if(!com) { com = {}; } if (!com.flametreepublishing) { com.flametreepublishing = {} } 5.3.4.3 Object-Oriented While JavaScript is not a true OOP language, it is still used in a OOP style. We write scripts called classes that define properties. //Example: Define a custom class, then create an instance. var com; if(!com) { com = {}; } if(!com.flametreepublishing) { com.flametreepublishing = {}; } com.flametreepublishing.QuizQuestion = functio(aQustionNum, AQuestionText, aAnswer, aCorrectAnswerIndex){ this.questionNum = aQustionNum; this.questionText = AQuestionText; this.answers = aAnswer; this.correctAnswerIndex = aCorrectAnswerIndex; //Creating an instance new com.flametreepublishing.QuizQuestion( 1, &quot;Approx how far away from the Earth is the Sun?&quot;, [&quot;200 miles&quot;, &quot;93 000 000 miles&quot;, &quot;49 000 000 miles&quot;, &quot;150 000 miles&quot;], 1 ) } 5.3.5 Misc When JavaScript is referenced from a separate file, the use of async makes the page load ahead of the script. &lt;script async src=&quot;js/main.js&quot;&gt;&lt;/script&gt; Variables defines outsisde of a function are global variables, which can be accessed from any function. Local variables only live inside a function. If you forgets to preface with var, the variable becomes global. var imAGlobalVar = 10; function foo() { var imALocalVar = 11; //local variable imAGlobalVar2 = 12; //global variable, not good practice } Associating functions with objects &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;A Simple Quiz&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function movie(title, director) { this.title = title; this.director = director; this.toString = function movieToString() { return(&quot;title: &quot;+this.title+&quot; director: &quot;+this.director); } } var narnia = new movie(&quot;Narnia&quot;, &quot;Andew Adamson&quot;); document.write(narnia.toString()); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; Prototypes. Objects can have prototypes from which they may inherit fields and functions. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;A Simple Quiz&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; function movieToString() { return(&quot;title: &quot;+this.title+&quot; director: &quot;+this.director); } function movie(title, director) { this.title = title; this.director = director || &quot;unknown&quot;; //if null assign to &quot;unknown&quot; this.toString = movieToString; //assign function to this method pointer } var officeSpace = new movie(&quot;OfficeSpace&quot;); var narnia = new movie(&quot;Narnia&quot;,&quot;Andrew Adamson&quot;); movie.prototype.isComedy = false; //add a field to the movie&#39;s prototype document.write(narnia.toString()); document.write(&quot;&lt;br /&gt;Narnia a comedy? &quot;+narnia.isComedy); officeSpace.isComedy = true; //override the default just for this object document.write(&quot;&lt;br /&gt;Office Space a comedy? &quot;+officeSpace.isComedy); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; Error handling try { obj = null; null.to_s(); } catch (e) { document.write(&quot;Exception: &quot;+e); } finally { document.write(&quot;&lt;br /&gt;Bye.&quot;); } To execute a method repeatedly function timer(){ setTimeout(&#39;myMethod()&#39;,2000); } var myId; ... myId = setInterval(&#39;myMethod()&#39;,2000); To close a window &lt;a href=&#39;javascript:window.close()&#39; class=&#39;mainnav&#39;&gt; Close &lt;/a&gt; &lt;/body&gt; Link &lt;a href=&quot;https://www.espn.com/nba/&quot;&gt;NBA is fun!&lt;/a&gt; 5.3.6 Working with HTML Elements Buttons &lt;form name=&quot;buttonGalore&quot; method=&quot;get&quot;&gt; Your Name: &lt;input type=&quot;text&quot; name=&quot;mytext&quot;/&gt; &lt;br/&gt; &lt;input type=&quot;submit&quot; value =&quot;GO!&quot; /&gt; &lt;input type = &quot;reset&quot; value =&quot;Clear All&quot;/&gt; &lt;/form&gt; Onclick &lt;form name=&quot;buttonsGalore&quot; method=&quot;get&quot;&gt; &lt;fieldset style=&quot;margin: 1em; text-align: center; padding: 1em;&quot;&gt; &lt;legend&gt;Select a Movie&lt;/legend&gt; &lt;input type=&quot;button&quot; value=&quot;Godfather&quot; onclick=&quot;displayMovie(this)&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;Bodyguard&quot; onclick=&quot;displayMovie(this)&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;Remember the Titans&quot; onclick=&quot;displayMovie(this)&quot; /&gt; &lt;/fieldset&gt; &lt;/form&gt; Radio button &lt;script&gt; function findButton() { var myForm = document.forms.animalForm; var i; for(i=0;i&lt;myForm.marsupial.length; i++) { if(myForm.marsupial[i].checked) { break; } } alert(&quot;You selected \\&quot;&quot;+myForm.marsupial[i].value+&quot;\\&quot;.&quot;); } &lt;/script&gt; &lt;form name=&quot;animalForm&quot;&gt; &lt;input type=&quot;radio&quot; name=&quot;marsupial&quot; value=&quot;kangaroo&quot; /&gt;Kangaroo &lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;marsupial&quot; value=&quot;Opossum&quot; /&gt;Opossum &lt;br /&gt;&lt;input type=&quot;radio&quot; name=&quot;marsupial&quot; value=&quot;Tasmanian Tiger&quot; /&gt;Tasmanian Tiger &lt;br /&gt; &lt;input type=&quot;button&quot; name=&quot;GO&quot; value=&quot;GO&quot; onclick=&quot;findButton()&quot; /&gt; &lt;/form&gt; Accessing Elements &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Testing&lt;/title&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;js/main2.js&quot;&gt;&lt;/script&gt; &lt;form name=&quot;teamForm&quot;&gt; &lt;select name=&quot;team&quot;&gt; &lt;option selected=&quot;selected&quot;&gt;Select NBA team to win it&lt;/option&gt; &lt;option&gt;Lakers&lt;/option&gt; &lt;option&gt;Utah&lt;/option&gt; &lt;option&gt;Golden State&lt;/option&gt; &lt;option&gt;Chicago&lt;/option&gt; &lt;option&gt;Charlotte&lt;/option&gt; &lt;/select&gt; &lt;input type=&quot;button&quot; name=&quot;submitbutton&quot; value=&quot;Team&quot; onclick=&quot;showStatus()&quot; /&gt; &lt;/form&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; function showStatus() { var selectWidget = document.forms.teamForm.elements[&quot;team&quot;]; var myValue = selectWidget.options[selectWidget.selectedIndex].value; alert(&#39;You picked \\&quot;&#39;+ myValue +&quot;\\&quot;&quot;); return true; } 5.3.6.1 Dynamic HTML elements Creating a grocery store list &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;Testing&lt;/title&gt; &lt;!-- Adding new elements to a list --&gt; &lt;script&gt; function addItem() { var myitem = document.getElementById(&quot;ItemToAdd&quot;).value; var mylistItems = document.getElementById(&quot;mylist&quot;); var newP = document.createElement(&quot;li&quot;); var textNode = document.createTextNode(myitem); newP.appendChild(textNode); document.getElementById(&quot;mylist&quot;).appendChild(newP); return false; } &lt;/script&gt; &lt;form onsubmit=&quot;return addItem()&quot; action=&quot;#&quot;&gt; &lt;span&gt;Grocery Items:&lt;/span&gt; &lt;input type=&quot;text&quot; id=&quot;ItemToAdd&quot; value=&quot;Milk&quot; /&gt; &lt;input type=&quot;button&quot; value=&quot;Add&quot; onclick=&quot;addItem()&quot; /&gt; &lt;/form&gt; &lt;span&gt;Grocery List:&lt;/span&gt; &lt;ol id=&quot;mylist&quot;&gt;&lt;/ol&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 5.3.7 DOM and events of JS 5.3.7.1 DOM programming Document Object Model programming allows JavaScript to make changes to a page after it has been loaded. //We&#39;ve updated substantially the renderQuestion method. Now, rather than //relying on document.write, which only works when the page is being loaded, //we&#39;re now using DOM programming techniques to create HTML elements //on-the-fly from within JavaScript. com.flametreepublishing.QuizQuestion.prototype.renderQuestion = function() { //First we create a &lt;div&gt; element in which to store the question&#39;s //content. This &lt;div&gt; is created but does not yet exist on the page var questionDiv = document.createElement(&quot;div&quot;); //We&#39;ll set an id attribute on the &lt;div&gt; - later, this will help us to //identify which question a user clicks on. We&#39;ll give the id a leading //&#39;q&#39; because it is bad practice to start an id value with a number. questionDiv.id = &quot;q&quot; + this.questionNum; //Now we create an &lt;h2&gt; element for the question&#39;s title var questionHeading = document.createElement(&quot;h2&quot;); //An element&#39;s innerHtml property allows us to write HTML that will be //rendered within that element... questionHeading.innerHTML = &quot;QUESTION &quot; + this.questionNum; //Now we add the &lt;h2&gt; to the &lt;div&gt; questionDiv.appendChild(questionHeading); //Next, we create a &lt;p&gt; to hold the question text itself, and add //this to the &lt;div&gt; too. var questionTextPara = document.createElement(&quot;p&quot;); questionTextPara.innerHTML = this.questionText; questionDiv.appendChild(questionTextPara); //Now we&#39;ll loop through the QuizQuestion object&#39;s &#39;answers&#39; //array, creating a &lt;p&gt; for each and and adding them //to our &lt;div&gt; element for(var i = 0; i &lt; this.answers.length; i++) { var answerPara = document.createElement(&quot;p&quot;); answerPara.innerHTML = this.answers[i]; answerPara.id = &quot;a&quot; + i; questionDiv.appendChild(answerPara); } //Finally, we add the &lt;div&gt; to the body of the page document.body.appendChild(questionDiv); } 5.3.7.2 Events Event Handler W3C event model //Create a method for handling user &#39;click&#39; events com.flametreepublishing.SimpleQuiz.prototype.clickHandler = function(e) { //The handler will always be passed an objec that contains data //about the event that triggered the handler. We&#39;re using an identifier //of &#39;e&#39; for this. With a &#39;click&#39; event, &#39;e.target&#39; will always refer to //the HTML element on which the click event occurred. //First we&#39;ll get the id attribute of the clicked answer var clickedAnswerId = e.target.id; //Now we need to extract the answer index, a Number, from the id value, //which is a string. We do this by extracting the second character of the //id using the &#39;substr&#39; method of the String class, and then casting this to //a number. Notice that we can do this all within one compound expression. var clickedAnswerIndex = Number(clickedAnswerId.substr(1, 1)); //Next we need to know which question has been answered. Recall that we added //an id attribute to the &lt;div&gt; that contains the question - this &lt;div&gt; is the //parent of the answer &lt;p&gt; that was clicked, so we can access it using //&#39;e.target.parentNode&#39;. //Once we have a reference to the &lt;div&gt; we can extract the question index in //much the same way as we did the answer index var clickedQuestionId = e.target.parentNode.id; var clickedQuestionNum = Number(clickedQuestionId.substr(1, 1)); //The question number stored in the containg &lt;div&gt; id attribute is one-based, but //we need a zero-based number when accessing the questions array - for this reason //we subtract &#39;1&#39; from the clickedQuestionNum when retrieving the QuizQuestion object var clickedQuestion = com.flametreepublishing.simpleQuiz.questions[clickedQuestionNum -1]; //Now that we have the correct QuizQuestion object we can call its &#39;checkUserAnswer&#39; //method to see if the user was correct. Recall that &#39;checkUserAnswer&#39; returns //&#39;true&#39; or &#39;false&#39; - all we need do, then, is call the method as the conditional //expression of an &#39;if&#39; statement. if(clickedQuestion.checkUserAnswer(clickedAnswerIndex)) { alert(&quot;Correct! Well done.&quot;); } else { alert(&quot;No - that&#39;s not correct. Try again.&quot;); } } Event Listener //The user will click on the answer they believe to be correct, so let&#39;s //add an event listener to the answer&#39;s &lt;p&gt;. Note that we don&#39;t include //parentheses &#39;()&#39; after the handler method reference - if we did then //the handler would be evaluated when the event listener is added to the //&lt;p&gt;, and this is definitely NOT what we want! answerPara.addEventListener(&quot;click&quot;, com.flametreepublishing.simpleQuiz.clickHandler, false) "],
["python.html", "6 Python 6.1 Basic 6.2 Scrapy 6.3 Misc", " 6 Python 6.1 Basic 6.1.1 Regular Expressions Regular expressions ^ Matches the beginning of a line $ Matches the end of a line . Matches any character backslash s Matches whitespace backslash S Matches any non-whitespace character * Repeats a character zero or more times *? Repeats a character zero or more times (non-greedy) + Repeats a character one or more times +? Repeats a character one or more times (non-greedy) [aeiou] Matches a single character in the listed set [^YXZ] Matches a single character not in the listed set [a-z0-9] The set of characters can include a range ( Indicates where string extraction is to start ) Indicates where string extraction is to end /th&gt; Matches word boundary /th&gt; any digit any non-digit any whitespace any non-whitespace any alphanumerical character any non-alphanumerical character {n} Exactly n repetitions {n,} At least n repetitions {,n} At most n repetitions {m,n} At least m and at most n repetitions 6.1.1.1 Regex working with dates ###Regular expression for dates #date variations are many dateStr = &#39;23-10-2002\\n23/10/2002\\n23/10/02\\n10/23/2002\\nOct 23, 2002\\nOctober 23, 2002\\n23 October 2002&#39; print(re.findall(r&#39;\\d{1,2}[/-]\\d{1,2}[/-]\\d{4}&#39;, dateStr)) ###matches any of first 1-2 digits, then either -/ then 1-2 digits, then either, then two digits print(re.findall(r&#39;\\d{1,2}[/-]\\d{1,2}[/-]\\d{2,4}&#39;, dateStr)) ##at least 2 and max 4 print(re.findall(r&#39;\\d{1,2} (?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]* \\d{2,4}&#39;, dateStr)) ###Using ? says that it should not just give the information in the () #starts with the characters but can have more characters after1 print(re.findall(r&#39;(?:\\d{1,2} )?(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug| Sep|Oct|Nov|Dec)[a-z]* (?:\\d{1,2}, )?\\d{2,4}&#39;, dateStr)) #the above says it may have information at the start or at the expanded 6.1.2 Working with Text and Strings #Working with Text text1 = &quot;Since February 2015, the Riksbank has purchased government bonds with the aim of making monetary policy more expansionary.&quot; len(text1) #get number of characters text2 = text1.split(&#39; &#39;) #split into words len(text2) #get number of words print(text2) #finding specific words_fomc print([w for w in text2 if len(w) &gt; 3]) #get all words longer then 3 characters #capitalized words print([w for w in text2 if w.istitle()]) #use istitle to get words with capitalized first character #words that end with s print([w for w in text2 if w.endswith(&#39;s&#39;)]) #words that end with s #Finding unique words text3 = &#39;To be or not to be&#39; text4 = text3.split(&#39; &#39;) print(len(text4)) print(set(text4)) ##finding unique words with set (but caps sensitive) print(len(set([w.lower() for w in text4]))) ##only get lower print(set([w.lower() for w in text4])) #minut 4. ##check what it is #s.startwidth(t) #s.endswith(t) #t in s #if a substring is in a bigger #s.isupper(); s.islower(); s.istitle() #s.isalpha(); s.isdigit(); s.isalnum() #if string is alphabetical, numerical, or both ##string operations (change the string) #s.lower(); s.upper(); s.titlecase() #s.split(t) #split depending on t #s.splitlines() #split sentence line on new line character or end of line character #s.join(t) #takes word t and join with s #s.strip(); s.rstrip() ##strip, take out for example space. strip from front, rstrip from endswith #s.find(t); s.rfind(t) #s.replace(u,v) ###from words to characters text5 = &#39;ouagadougou&#39; text6 = text5.split(&#39;ou&#39;) #split on ou print(text6) text6 = &#39;ou&#39;.join(text6) #now you get back the full. split and join opposite. print(text6) #get all of the characters, do it as a list print(list(text5)) print([c for c in text5]) ###Cleaning text text8 = &#39; A quick brown fox jumped over the lazy dog. &#39; text9 = text8.strip() #strips out white characters print(text9.split(&#39; &#39;)) #split on space ###Changing text1 #find and replace text9 = &#39; A quick brown fox jumped over the lazy dog. &#39; print(text9.find(&#39;o&#39;)) #starts from start print(text9.rfind(&#39;o&#39;)) #starts from end print(text9.replace(&#39;o&#39;, &#39;O&#39;)) #replace small letters with capital 6.2 Scrapy pip install Scrapy 6.2.1 Shell commands Run scrapy in shell: Write ‘scrapy shell’ in miniconda Fetch page: Write ‘Fetch (“https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-foretagscertifikat/auction-results/2020/results-of-auctions-2020-09-23/”)’ Use view(response) 6.2.2 Scrape table # Spider import scrapy class ToScrapeCSSSpider(scrapy.Spider): name = &quot;rb_scrape2&quot; start_urls = [ &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-foretagscertifikat/auction-results/2020/results-of-auctions-2020-09-23/&#39; ] def parse(self, response): for item in response.xpath(&#39;//*[@class=&quot;page-base__main__body&quot;]//tr&#39;): yield { &#39;terms&#39; : item.xpath(&#39;td[1]//text()&#39;).extract(), &#39;auction&#39; : item.xpath(&#39;td[2]//text()&#39;).extract() } next_page_url = response.css(&quot;li.next &gt; a::attr(href)&quot;).extract_first() if next_page_url is not None: yield scrapy.Request(response.urljoin(next_page_url)) # Settings #Export as CSV Feed #FEED_FORMAT = &quot;csv&quot; #FEED_URI = &quot;rbbot.csv&quot; #Run crawler in miniconda with creating an csv (if its not in settings): scrapy crawl rb_scrape2 -o quotes.csv 6.2.3 Scrape table json treasury scraper # Spider # -*- coding: utf-8 -*- #from scrapy import BaseSpider import scrapy #from TreasuryScraper.items import TreasuryItem import json class TreasurySpider(scrapy.Spider): name = &#39;treasury&#39; start_urls = [ &#39;https://www.treasurydirect.gov/TA_WS/securities/jqsearch?format=json&amp;filterscount=0&amp;groupscount=0&amp;pagenum=0&amp;pagesize=1000&amp;recordstartindex=0&amp;recordendindex=1000&#39;, ] def parse(self, response): jsonresponse = json.loads(response.text) for item in jsonresponse[&#39;securityList&#39;]: yield { &#39;cusip&#39;: item[&#39;cusip&#39;], &#39;securityType&#39;: item[&#39;securityType&#39;], &#39;securityTerm&#39;: item[&#39;securityTerm&#39;], &#39;offeringAmount&#39;: item[&#39;offeringAmount&#39;], &#39;tips&#39;: item[&#39;tips&#39;], &#39;type&#39;: item[&#39;type&#39;], &#39;pricePer100&#39;: item[&#39;pricePer100&#39;], &#39;floatingRate&#39;: item[&#39;floatingRate&#39;], &#39;reopening&#39;: item[&#39;reopening&#39;], &#39;auctionDate&#39;: item[&#39;auctionDate&#39;], &#39;maturityDate&#39;: item[&#39;maturityDate&#39;], &#39;term&#39;: item[&#39;term&#39;], &#39;competitiveAccepted&#39;: item[&#39;competitiveAccepted&#39;], &#39;allocationPercentage&#39;: item[&#39;allocationPercentage&#39;], &#39;averageMedianYield&#39;: item[&#39;averageMedianYield&#39;], &#39;bidToCoverRatio&#39;: item[&#39;bidToCoverRatio&#39;], &#39;competitiveAccepted&#39;: item[&#39;competitiveAccepted&#39;], &#39;highYield&#39;: item[&#39;highYield&#39;], &#39;lowYield&#39;: item[&#39;lowYield&#39;], &#39;somaAccepted&#39;: item[&#39;somaAccepted&#39;], &#39;somaHoldings&#39;: item[&#39;somaHoldings&#39;], &#39;primaryDealerAccepted&#39;: item[&#39;primaryDealerAccepted&#39;], &#39;directBidderAccepted&#39;: item[&#39;directBidderAccepted&#39;], &#39;directBidderTendered&#39;: item[&#39;directBidderTendered&#39;], &#39;indirectBidderAccepted&#39;: item[&#39;indirectBidderAccepted&#39;], &#39;indirectBidderTendered&#39;: item[&#39;indirectBidderTendered&#39;], &#39;interestPaymentFrequency&#39;: item[&#39;interestPaymentFrequency&#39;] } #settings # -*- coding: utf-8 -*- #BOT_NAME = &#39;TreasuryScraper&#39; #SPIDER_MODULES = [&#39;TreasuryScraper.spiders&#39;] #NEWSPIDER_MODULE = &#39;TreasuryScraper.spiders&#39; #ROBOTSTXT_OBEY = False #DOWNLOAD_DELAY = 60.0 #AUTOTHROTTLE_ENABLED = True #HTTPCACHE_ENABLED = True #FEED_EXPORT_ENCODING = &#39;utf-8&#39; #scrapy crawl treasury -o output.csv 6.2.4 Scrape table json auction results Riksbank import scrapy from scrapy.spiders import CrawlSpider, Rule from scrapy.linkextractors import LinkExtractor from RiksbankAuctionScraper.items import GovernmentBond def get_table_attr(response, x): # to handle strange tables # using normalize-space() to avoid &quot;\\n&quot; as matching xpath xpaths = [ &#39;.//td[contains(text(),&quot;{0}&quot;)]/following-sibling::td/text()[normalize-space()]&#39;, #if td contains, use following sibling &#39;.//td[contains(text(),&quot;{0}&quot;)]/following-sibling::td/p/text()[normalize-space()]&#39;, &#39;.//th/span[contains(text(),&quot;{0}&quot;)]/../following-sibling::td/span/text()[normalize-space()]&#39; #if th/span contains text, use following sibbling ] xpath_str = &#39;|&#39;.join(xpaths).format(x) return response.xpath(xpath_str).get() class RiksbankSpider(CrawlSpider): name = &quot;RiksbankAuctionScraper_v5&quot; allowed_domains = [&#39;riksbank.se&#39;] start_urls = [ &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-statsobligationer/results-of-auctions&#39; ] rules = ( Rule(LinkExtractor( allow=(&#39;\\/kop-av-statsobligationer\\/results-of-auctions\\/2020\\/results-of-auctions-\\d{4}-\\d{2}-\\d{2}\\/$&#39;) ), callback=&#39;parse_government_bond&#39;), ) def parse_government_bond(self, response): for selector in response.xpath(&quot;//table&quot;): item = GovernmentBond() item[&#39;auction_type&#39;] = &#39;statsobligationer&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;Auction date&quot;) #text to look for item[&#39;loan_number&#39;] = get_table_attr(selector, &quot;Loan&quot;) yield item #Items # -*- coding: utf-8 -*- from scrapy import Item, Field class GovernmentBonds(Item): auction_type = Field() auction_date = Field() loan_number= Field() 6.2.5 Scrape table RiksbankAuctionScraper import scrapy from scrapy.spiders import CrawlSpider, Rule from scrapy.linkextractors import LinkExtractor from RiksbankAuctionScraper.items import GovernmentBonds, SekLending, FundingForLending, CommercialPapers, UsLending, CoveredBonds, MunicipalBonds def get_table_attr(response, x): # using normalize-space() to avoid &quot;\\n&quot; as matching xpath xpaths = [ &#39;.//td[contains(translate(text(), &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;),&quot;{0}&quot;)]/following-sibling::td/text()[normalize-space()]&#39;, &#39;.//td[contains(translate(text(), &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;),&quot;{0}&quot;)]/following-sibling::td/*/text()&#39;, &#39;.//td/span[contains(translate(text(), &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;),&quot;{0}&quot;)]/../following-sibling::td/span/text()&#39;, &#39;.//th/span[contains(translate(text(), &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;, &quot;abcdefghijklmnopqrstuvwxyz&quot;),&quot;{0}&quot;)]/../following-sibling::td/span/text()&#39; ] xpath_str = &#39;|&#39;.join(xpaths).format(x) return response.xpath(xpath_str).get() class RiksbankSpider(CrawlSpider): name = &quot;RiksbankAuctionScraper&quot; allowed_domains = [&#39;riksbank.se&#39;] start_urls = [ # &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-kommunobligationer/auction-results/&#39;, # &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-statsobligationer/results-of-auctions/&#39;, &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-sakerstallda-obligationer/results-of-auctions/&#39;, #&#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/kop-av-foretagscertifikat/auction-results/&#39;, #&#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/lan-till-bankerna-for-vidareutlaning-till-foretag/auction-results/&#39;, # &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/lan-i-amerikanska-dollar/auction-results/&#39;, # &#39;https://www.riksbank.se/sv/penningpolitik/penningpolitiska-instrument/veckovisa-extraordinara-marknadsoperationer/auction-results/&#39; ] rules = ( Rule(LinkExtractor( allow=(&#39;\\/kop-av-statsobligationer\\/results-of-auctions\\/&#39;) ), callback=&#39;parse_bonds&#39;), Rule(LinkExtractor( allow=(&#39;\\/kop-av-sakerstallda-obligationer\\/results-of-auctions\\/2020\\/&#39;) ), callback=&#39;parse_covered_bonds&#39;), Rule(LinkExtractor( allow=(&#39;\\/veckovisa-extraordinara-marknadsoperationer\\/auction-results\\/2020\\/&#39;) ), callback=&#39;parse_sek_lending&#39;), Rule(LinkExtractor( allow=(&#39;\\/kop-av-foretagscertifikat\\/auction-results\\/2020\\/&#39;) ), callback=&#39;parse_ftg_cert&#39;), Rule(LinkExtractor( allow=(&#39;\\/lan-till-bankerna-for-vidareutlaning-till-foretag\\/auction-results\\/2020\\/&#39;) ), callback=&#39;parse_ffl&#39;), Rule(LinkExtractor( allow=(&#39;\\/lan-i-amerikanska-dollar\\/auction-results\\/2020\\/&#39;) ), callback=&#39;parse_us_lending&#39;), Rule(LinkExtractor( allow=(&#39;\\/kop-av-kommunobligationer\\/auction-results\\/2020\\/&#39;) ), callback=&#39;parse_municipal&#39;), ) def parse_bonds(self, response): for selector in response.xpath(&quot;//table&quot;): item = GovernmentBonds() item[&#39;auction_type&#39;] = &#39;governmentBonds&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;loan_number&#39;] = get_table_attr(selector, &quot;loan&quot;) item[&#39;isin&#39;] = get_table_attr(selector, &quot;isin&quot;) item[&#39;coupon&#39;] = get_table_attr(selector, &quot;coupon&quot;) item[&#39;tendered_volume&#39;] = get_table_attr(selector, &quot;tendered&quot;) item[&#39;volume_offered&#39;] = get_table_attr(selector, &quot;offered&quot;) item[&#39;volume_bought&#39;] = get_table_attr(selector, &quot;bought&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) item[&#39;number_of_accepted_bids&#39;] = get_table_attr(selector, &quot;number of accepted bids&quot;) item[&#39;average_yield&#39;] = get_table_attr(selector, &quot;average yield&quot;) item[&#39;lowest_accepted_yield&#39;] = get_table_attr(selector, &quot;lowest accepted yield&quot;) item[&#39;highest_accepted_yield&#39;] = get_table_attr(selector, &quot;highest yield&quot;) item[&#39;accepted_at_lowest_perc&#39;] = get_table_attr(selector, &quot;accepted at lowest&quot;) yield item def parse_covered_bonds(self, response): for selector in response.xpath(&quot;//table&quot;): item = CoveredBonds() item[&#39;auction_type&#39;] = &#39;coveredBonds&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;loan_number&#39;] = get_table_attr(selector, &quot;loan&quot;) item[&#39;isin&#39;] = get_table_attr(selector, &quot;isin&quot;) item[&#39;coupon&#39;] = get_table_attr(selector, &quot;coupon&quot;) item[&#39;tendered_volume&#39;] = get_table_attr(selector, &quot;tendered&quot;) item[&#39;volume_offered&#39;] = get_table_attr(selector, &quot;offered&quot;) item[&#39;volume_bought&#39;] = get_table_attr(selector, &quot;bought&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(response, &quot;number of bids&quot;) item[&#39;number_of_accepted_bids&#39;] = get_table_attr(selector, &quot;number of accepted bids&quot;) item[&#39;average_yield&#39;] = get_table_attr(selector, &quot;average yield&quot;) item[&#39;lowest_accepted_yield&#39;] = get_table_attr(selector, &quot;lowest accepted yield&quot;) item[&#39;highest_accepted_yield&#39;] = get_table_attr(selector, &quot;highest yield&quot;) item[&#39;accepted_at_lowest_perc&#39;] = get_table_attr(selector, &quot;accepted at lowest&quot;) yield item def parse_sek_lending(self, response): for selector in response.xpath(&quot;//table&quot;): item = SekLending() item[&#39;auction_type&#39;] = &#39;sekLending&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;payment_date&#39;] = get_table_attr(selector, &quot;payment date&quot;) item[&#39;maturity_date&#39;] = get_table_attr(selector, &quot;maturity date&quot;) item[&#39;term&#39;] = get_table_attr(selector, &quot;term&quot;) item[&#39;offered_volume&#39;] = get_table_attr(selector, &quot;offered volume&quot;) item[&#39;total_bid_amount&#39;] = get_table_attr(selector, &quot;total bid amount&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) item[&#39;allotment&#39;] = get_table_attr(selector, &quot;allotment&quot;) item[&#39;interest_rate&#39;] = get_table_attr(selector, &quot;interest rate&quot;) yield item def parse_ftg_cert(self, response): for selector in response.xpath(&quot;//table&quot;): item = CommercialPapers() item[&#39;auction_type&#39;] = &#39;commercialPapers&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;credit_rating_class&#39;] = get_table_attr(selector, &quot;credit rating class&quot;) item[&#39;term&#39;] = get_table_attr(selector, &quot;term&quot;) item[&#39;fixed_purchase_rate&#39;] = get_table_attr(selector, &quot;fixed purchase rate&quot;) item[&#39;total_bid_amount&#39;] = get_table_attr(selector, &quot;total bid amount&quot;) item[&#39;volume_bought&#39;] = get_table_attr(selector, &quot;accepted volume&quot;) item[&#39;percentage_alloted&#39;] = get_table_attr(selector, &quot;percentage allotted&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) yield item def parse_ffl(self, response): for selector in response.xpath(&quot;//table&quot;): item = FundingForLending() item[&#39;auction_type&#39;] = &#39;fundingForLending&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;settlement_date&#39;] = get_table_attr(selector, &quot;settlement date&quot;) item[&#39;final_repayment_date&#39;] = get_table_attr(selector, &quot;final repayment date&quot;) item[&#39;offered_volume&#39;] = get_table_attr(selector, &quot;offered volume&quot;) item[&#39;total_bid_amount&#39;] = get_table_attr(selector, &quot;total bid amount&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) item[&#39;allotment&#39;] = get_table_attr(selector, &quot;allotment&quot;) item[&#39;interest_rate&#39;] = get_table_attr(selector, &quot;interest rate&quot;) item[&#39;interest_rate_supplement&#39;] = get_table_attr(selector, &quot;interest rate supplement&quot;) yield item def parse_us_lending(self, response): for selector in response.xpath(&quot;//table&quot;): item = UsLending() item[&#39;auction_type&#39;] = &#39;usLending&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;settlement_date&#39;] = get_table_attr(selector, &quot;settlement date&quot;) item[&#39;maturity_date&#39;] = get_table_attr(selector, &quot;maturity date&quot;) item[&#39;term&#39;] = get_table_attr(selector, &quot;term&quot;) item[&#39;offered_volume&#39;] = get_table_attr(selector, &quot;offered volume&quot;) item[&#39;marginal_interest_rate&#39;] = get_table_attr(selector, &quot;marginal interest rate&quot;) item[&#39;allotment_at_marginal&#39;] = get_table_attr(selector, &quot;allotment at marginal&quot;) item[&#39;total_bid_amount&#39;] = get_table_attr(selector, &quot;total bid amount&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) item[&#39;allotment&#39;] = get_table_attr(selector, &quot;allotment&quot;) #if item[&#39;allotment] == none. hmm? yield item def parse_municipal(self, response): for selector in response.xpath(&quot;//table&quot;): item = MunicipalBonds() item[&#39;auction_type&#39;] = &#39;municipalBonds&#39; item[&#39;auction_date&#39;] = get_table_attr(selector, &quot;auction date&quot;) item[&#39;loan_number&#39;] = get_table_attr(selector, &quot;loan&quot;) item[&#39;isin&#39;] = get_table_attr(selector, &quot;isin&quot;) item[&#39;coupon&#39;] = get_table_attr(selector, &quot;coupon&quot;) item[&#39;tendered_volume&#39;] = get_table_attr(selector, &quot;tendered&quot;) item[&#39;volume_offered&#39;] = get_table_attr(selector, &quot;offered&quot;) item[&#39;volume_bought&#39;] = get_table_attr(selector, &quot;bought&quot;) item[&#39;number_of_bids&#39;] = get_table_attr(selector, &quot;number of bids&quot;) item[&#39;number_of_accepted_bids&#39;] = get_table_attr(selector, &quot;number of accepted bids&quot;) item[&#39;average_yield&#39;] = get_table_attr(selector, &quot;average yield&quot;) item[&#39;lowest_accepted_yield&#39;] = get_table_attr(selector, &quot;lowest accepted yield&quot;) item[&#39;highest_accepted_yield&#39;] = get_table_attr(selector, &quot;highest yield&quot;) item[&#39;accepted_at_lowest_perc&#39;] = get_table_attr(selector, &quot;accepted at lowest&quot;) yield item #items # -*- coding: utf-8 -*- from scrapy import Item, Field class GovernmentBonds(Item): auction_type = Field() auction_date = Field() loan_number = Field() isin = Field() coupon = Field() tendered_volume = Field() volume_offered = Field() volume_bought = Field() number_of_bids = Field() number_of_accepted_bids = Field() average_yield = Field() lowest_accepted_yield = Field() highest_accepted_yield = Field() accepted_at_lowest_perc = Field() #auction_date = Field() auction_type = Field() class CoveredBonds(Item): auction_type = Field() auction_date = Field() loan_number = Field() isin = Field() coupon = Field() tendered_volume = Field() volume_offered = Field() volume_bought = Field() number_of_bids = Field() number_of_accepted_bids = Field() average_yield = Field() lowest_accepted_yield = Field() highest_accepted_yield = Field() accepted_at_lowest_perc = Field() #auction_date = Field() auction_type = Field() class MunicipalBonds(Item): auction_type = Field() auction_date = Field() loan_number = Field() isin = Field() coupon = Field() tendered_volume = Field() volume_offered = Field() volume_bought = Field() number_of_bids = Field() number_of_accepted_bids = Field() average_yield = Field() highest_accepted_yield = Field() lowest_accepted_yield = Field() accepted_at_lowest_perc = Field() #auction_date = Field() auction_type = Field() class SekLending(Item): auction_type = Field() auction_date = Field() payment_date = Field() maturity_date = Field() term = Field() offered_volume = Field() total_bid_amount = Field() number_of_bids = Field() allotment = Field() interest_rate = Field() class CommercialPapers(Item): auction_type = Field() auction_date = Field() credit_rating_class = Field() term = Field() fixed_purchase_rate = Field() total_bid_amount = Field() volume_bought = Field() percentage_alloted = Field() number_of_bids = Field() class FundingForLending(Item): auction_type = Field() auction_date = Field() settlement_date = Field() final_repayment_date = Field() offered_volume = Field() total_bid_amount = Field() number_of_bids = Field() allotment = Field() interest_rate = Field() interest_rate_supplement = Field() class UsLending(Item): auction_type = Field() auction_date = Field() settlement_date = Field() maturity_date = Field() term = Field() offered_volume = Field() marginal_interest_rate = Field() allotment_at_marginal = Field() total_bid_amount = Field() number_of_bids = Field() allotment = Field() #settings BOT_NAME = &#39;RiksbankAuctionScraper&#39; SPIDER_MODULES = [&#39;RiksbankAuctionScraper.spiders&#39;] NEWSPIDER_MODULE = &#39;RiksbankAuctionScraper.spiders&#39; # Crawl responsibly by identifying yourself (and your website) on the user-agent #USER_AGENT = &#39;ReportScraper (+http://www.yourdomain.com)&#39; # Obey robots.txt rules ROBOTSTXT_OBEY = True HTTPCACHE_ENABLED = True DOWNLOAD_DELAY = 10.0 #crawl #scrapy crawl RiksbankAuctionScraper -o output.json ###import it to R library(&quot;rjson&quot;) output &lt;- fromJSON(file = &quot;C:\\\\Users\\\\chris\\\\Documents\\\\Python\\\\Projects\\\\RiksbankAuctionScraper\\\\output.json&quot;) output &lt;- rbindlist(output, idcol = TRUE) # Enable or disable extensions # See https://docs.scrapy.org/en/latest/topics/extensions.html #EXTENSIONS = { # &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None, #} AUTOTHROTTLE_ENABLED = True FEED_EXPORT_ENCODING = &#39;utf-8&#39; 6.2.6 BeautifulSoup mport urllib.request, urllib.parse, urllib.error from bs4 import BeautifulSoup import ssl # Ignore SSL certificate errors ctx = ssl.create_default_context() ctx.check_hostname = False ctx.verify_mode = ssl.CERT_NONE url = &#39;https://www.federalreserve.gov/monetarypolicy/fomccalendars.htm&#39; html = urllib.request.urlopen(url, context=ctx).read() soup = BeautifulSoup(html, &#39;html.parser&#39;) #text = soup.get_text() ##get all text #print(text) ##print all text #tables = soup.find_all(&quot;table&quot;) #find all tables #print(tables) #print(tables[1][&quot;style&quot;]) ##get the style element #lists = soup.find_all(&quot;li&quot;) #find all list elements #print(len(lists)) ##print number of list links = soup.select(&quot;a[href*=minutes]&quot;) #print(links) for link in links: print(link.get(&#39;href&#39;)) 6.3 Misc 6.3.1 Python in R Markdown #```{r setup, include=FALSE} knitr::opts_chunk$set(echo = TRUE) library(reticulate) py_install(&quot;pandas&quot;) ##install packages #https://rstudio.github.io/reticulate/articles/python_packages.html #https://stackoverflow.com/questions/54261906/reticulate-importerror-no-module-named-pandas-in-rstudio-version-1-2 "],
["git.html", "7 Git 7.1 Basics", " 7 Git 7.1 Basics "]
]
